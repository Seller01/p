function callSafe(fn) {
    if (fn !== undefined && fn !== null) {
        fn();
    }
}
function spinLock(locked, unlocked) {
    this.locked = false;
    /**
     * locks
     */
    this.lock = () => {
        this.locked = true;
        callSafe(locked);
    };
    /**
     * unlocks
     */
    this.unlock = () => {
        this.locked = false;
        callSafe(unlocked);
    };
    /**
     * checks if is locked
     * @returns true or false
     */
    this.isLocked = () => {
        return this.locked;
    };
    /**
     * waits for an unlock to happen asynchronously
     */
    this.waitForLock = onUnlocked => {
        if (this.locked === false) {
            setTimeout(this.waitForLock, 100, fn);
        } else {
            callSafe(onUnlocked);
        }
    };
};
const elementScrollEnd = {
    /**
     * Calls callback when user scrolls to the end of elements height
     * @param {jQuery} target jquery object
     * @param {Function} callback 
     */
    init: function (target, callback) {
        target.bind('scroll', function () {
            if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
                callback();
            }
        });
    }
};
const windowScrollEnd = {
    getScrollXY: function () {
        var scrOfX = 0, scrOfY = 0;
        if (typeof (window.pageYOffset) === 'number') {
            //Netscape compliant
            scrOfY = window.pageYOffset;
            scrOfX = window.pageXOffset;
        } else if (document.body && (document.body.scrollLeft || document.body.scrollTop)) {
            //DOM compliant
            scrOfY = document.body.scrollTop;
            scrOfX = document.body.scrollLeft;
        } else if (document.documentElement && (document.documentElement.scrollLeft || document.documentElement.scrollTop)) {
            //IE6 standards compliant mode
            scrOfY = document.documentElement.scrollTop;
            scrOfX = document.documentElement.scrollLeft;
        }
        return [scrOfX, scrOfY];
    },
    //taken from http://james.padolsey.com/javascript/get-document-height-cross-browser/
    getDocHeight: function () {
        var D = document;
        return Math.max(
            D.body.scrollHeight, D.documentElement.scrollHeight,
            D.body.offsetHeight, D.documentElement.offsetHeight,
            D.body.clientHeight, D.documentElement.clientHeight
        );
    },
    /**
     * Calls callback when user scrolls to the end of window
     * @param {Function} callback 
     */
    init: function (callback) {
        document.addEventListener("scroll", function (event) {
            if (windowScrollEnd.getDocHeight() === windowScrollEnd.getScrollXY()[1] + window.innerHeight) {
                callback();
            }
        });
    }
};

export class InfiniteScroll {
    /**
     * @param {jQuery} scrollTarget: undefined to watch window
     * @param {function(number): Promise<boolean>} callback: function (page, done: function(boolean)) {}
     * @param {function(): void} locked: is called when waiting for next page data
     * @param {function(): void} unlocked: is called when next page has arrived
     */
    constructor(scrollTarget, callback, locked, unlocked) {
        this.scrollTarget = scrollTarget;
        /**
         * @type {function(number): Promise<boolean>}
         */
        this.callback = callback;

        this.page = 0;
        this.hasMore = true;
        this.lock = new spinLock(locked, unlocked);
    }
    /**
     * Starts the infinite scroll object
     * @returns {void}
     */
    start() {
        if (this.scrollTarget !== undefined && this.scrollTarget !== null) {
            elementScrollEnd.init(this.scrollTarget, this._callback.bind(this));
        } else {
            windowScrollEnd.init(this._callback.bind(this));
        }
        //call initial page
        this._callback();
    }
    /**
     * Gets current page (1 based)
     * @returns {Number}
     */
    getPage() {
        return this.page;
    }
    /**
     * @private
     */
    _callback() {
        if (this.lock.isLocked()) return;
        if (!this.hasMore) return;
        this.lock.lock();
        this.page++;
        this.callback(this.page)
            .then(hasMore => {
                this.lock.unlock();
                this.hasMore = hasMore;
            })
            .catch(err => {
                console.error(`Exception while loading next page`);
                if (!_.isNil(err)) {
                    console.error(err);
                }
                this.page--;
                this.lock.unlock();
                this.hasMore = true;
            });
    }
}
