function exists(messages, culture, key) {
    return !_.isNil(messages) && !_.isNil(messages[culture]) && !_.isNil(messages[culture][key]);
}
function format(format) {
    const args = Array.prototype.slice.call(arguments, 1);
    return format.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined' ? args[number] : match;
    });
};
export class Translator {
    /**
     * @param {String} culture
     * @param {String} fallbackCulture
     * @param {Object} messages messages localization object
     */
    constructor(culture, fallbackCulture, messages) {
        /**
         * @type {String}
         */
        this.culture = culture;
        /**
         * @type {String}
         */
        this.fallbackCulture = fallbackCulture;
        /**
         * @type {Object}
         */
        this.messages = messages;
    }
    /**
     * Gives for a key and/or a culture
     * @param {String} key localization key
     */
    t(key) {
        const c = this.culture;
        const f = this.fallbackCulture;
        const args = Array.prototype.slice.call(arguments, 1);
        if (exists(this.messages, c, key)) {
            return format(this.messages[c][key], args);
        }
        if (exists(this.messages, f, key)) {
            return format(this.messages[f][key], args);
        }
        return key;
    }
}