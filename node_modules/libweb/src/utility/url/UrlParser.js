import { Url } from './Url';
import { _parseQueryString, _stringifyQueryString, _getLocation, _trim, _removePrefix } from './util';
import { ValidCultures } from "../ValidCultures";
import { ServerValues } from "../ServerValues";

const validCultures = new ValidCultures();

export class UrlParser {
    /**
     * 
     * Parses query string into object
     * @param {String} search query string
     * @returns {Object}
     */
    parseQueryString(search) {
        return _parseQueryString(search);
    }
    /**
     * Converts an object to its query string representation
     * @param {Object} obj : the object to convert to query string
     * @param {String} prefix : a prefix for query string
     * @returns {String}
     */
    stringifyQueryString(obj, prefix) {
        return _stringifyQueryString(obj, prefix);
    }
    /**
     * Creates an instance of Url from the given url string
     * @param {String} url 
     * @returns {Url}
     */
    parse(url) {
        var a = _getLocation(url);
        var res = new Url();
        res.protocol = _trim(a.protocol);

        res.host = _trim(a.host);
        res.hostname = _trim(a.hostname);
        res.port = _trim(a.port);

        res.pathname = _trim(a.pathname);

        res.search = _trim(a.search);
        res.query = _parseQueryString(_removePrefix(res.search, '?'));

        res.hash = _trim(a.hash);

        return res;
    }
    /**
     * Adds the given culture to the given url and always returns the __path__, __query string__ and __hash__ of the new url
     * ```
     * /en/login                -> /[culture]/login
     * /login                   -> /[culture]/login
     * http://some.com/login?arg1=v1    -> http://some.com/[culture]/login?arg1=v1
     * ```
     * @param {String} url the url to add the culture to
     * @param {String} culture culture code
     * @returns {Url}
     */
    localizeUrl(url, culture) {
        // make sure culture is ok
        if (culture === undefined || culture === null) {
            const serverValues = new ServerValues().getValues();
            culture = serverValues['culture'];
        }

        // update path
        var x = this.parse(url);
        var path = x.pathname;
        if (path[0] !== '/') {
            path = `/${path}`;
        }
        var acPath = path;
        var cultures = Object.keys(validCultures.all());
        for (var i = 0; i < cultures.length; i++) {
            var c = cultures[i];
            if (path.startsWith(`/${c}/`) || path === `/${c}`) {
                acPath = path.substr(3);
                break;
            }
        }
        if (acPath === '/') {
            acPath = '';
        }
        path = `/${culture}${acPath}`;

        // return
        var o = this.parse(path);
        o.protocol = x.protocol;
        o.host = x.host;
        o.hostname = x.hostname;
        o.port = x.port;
        o.pathname = path;
        o.search = x.search;
        o.query = x.query;
        o.hash = x.hash;
        return o;
    }
}