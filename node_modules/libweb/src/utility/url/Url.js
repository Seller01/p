import { _ensurePrefix, _stringifyQueryString, _trim } from './util';

export class Url {
    constructor() {
        /**
         * 'http:' or 'https'
         * @type {String}
         */
        this.protocol = '';
        /**
         * e.g: "example.com:3000"
         * @type {String}
         */
        this.host = '';
        /**
         * e.g: "example.com"
         * @type {String}
         */
        this.hostname = '';
        /**
         * e.g: "3000"
         * @type {String}
         */
        this.port = '';
        /**
         * e.g: "/pathname/action/"
         * @type {String}
         */
        this.pathname = '';
        /**
         * e.g: "?search=test"
         * @type {String}
         */
        this.search = '';
        /**
         * e.g: { 'search': 'test' }
         * @type {Object}
         */
        this.query = {}; // => 
        /**
         * e.g: "#hash"
         * @type {String}
         */
        this.hash = '';
    }
    /**
     * Check if this URL has a base url like http://localhost:1243
     * @returns {Boolean}
     */
    hasBaseUrl() {
        return this.protocol !== undefined && this.protocol !== null && this.protocol.length > 0 &&
            this.host !== undefined && this.host !== null && this.host.length > 0;
    }
    /**
     * Returns this URL's base url like http://localhost:1243 if any
     * @returns {String}
     */
    getBaseUrl() {
        if (this.hasBaseUrl()) {
            return `${this.protocol}//${this.host}`;
        }
        return undefined;
    }
    /**
     * Converts this instance to url string
     * @param {Boolean} relative whether to return relative url or absolute
     * @param {Boolean} useSearch whether to use search property or query property
     * @returns {String}
     */
    serialize(relative, useSearch) {
        const path = _ensurePrefix(_trim(this.pathname), '/');
        var search;
        if (useSearch) {
            search = _ensurePrefix(_trim(this.search), '?');
        }
        else {
            search = _ensurePrefix(_stringifyQueryString(this.query), '?');
        }
        const hash = _ensurePrefix(_trim(this.hash), '#');
        if (relative) {
            return `${path}${search}${hash}`;
        }
        return `${this.protocol}//${this.host}${path}${search}${hash}`;
    };
    /**
     * Converts this instance to a relative url string
     * @param {Boolean} useSearch whether to use search property or query
     * @returns {String}
     */
    toRelative(useSearch) {
        return this.serialize(true, useSearch);
    };
    /**
     * Converts this instance to an absolute url string
     * @param {Boolean} useSearch whether to use search property or query
     * @returns {String}
     */
    toAbsolute(useSearch) {
        return this.serialize(false, useSearch);
    };
}
