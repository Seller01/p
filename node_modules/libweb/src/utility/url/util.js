export function _isEmpty(str) {
    if (_.isNil(str)) return true;
    return str.length === 0;
}
export function _trim(str) {
    return _.isNil(str) || _isEmpty(str) ? '' : str.trim();
}
/**
 * 
 * @param {String} str 
 * @param {String} prefix 
 */
export function _ensurePrefix(str, prefix) {
    if (_.isNil(str) || _isEmpty(str)) {
        return '';
    }
    if (str.startsWith(prefix)) {
        return str;
    }
    return `${prefix}${str}`;
}
/**
 * 
 * @param {String} str 
 * @param {String} prefix 
 */
export function _removePrefix(str, prefix) {
    if (_.isNil(str) || _isEmpty(str)) {
        return '';
    }
    if (str.startsWith(prefix)) {
        return str.substr(prefix.length);
    }
    return str;
}
/**
 * 
 * @param {String} str 
 * @param {String} suffix 
 */
export function _ensureSuffix(str, suffix) {
    if (_.isNil(str) || _isEmpty(str)) {
        return '';
    }
    if (str.endsWith(suffix)) {
        return str;
    }
    return `${str}${suffix}`;
}
/**
 * 
 * @param {String} str 
 * @param {String} suffix 
 */
export function _removeSuffix(str, suffix) {
    if (_.isNil(str) || _isEmpty(str)) {
        return '';
    }
    if (str.endsWith(suffix)) {
        return str.substr(0, str.length - suffix.length);
    }
    return str;
}
export function _getLocation(href) {
    var location = document.createElement("a");
    location.href = href;
    // IE doesn't populate all link properties when setting .href with a relative URL,
    // however .href will return an absolute URL which then can be used on itself
    // to populate these additional fields.
    if (location.host == "") {
        location.href = location.href;
    }
    return location;
}
export function _stringifyQueryString(obj, prefix) {
    var str = [], p;
    for (p in obj) {
        if (obj.hasOwnProperty(p)) {
            var k = prefix ? prefix + "[" + p + "]" : p,
                v = obj[p];
            str.push(
                (v !== null && typeof v === "object")
                    ? _stringifyQueryString(v, k)
                    : encodeURIComponent(k) + "=" + encodeURIComponent(v)
            );
        }
    }
    return str.join("&");
}
export function _parseQueryString(search) {
    if (_.isNil(search) || _isEmpty(search)) {
        return {};
    }
    var s = `{"${decodeURIComponent(search).replace(/&/g, '","').replace(/=/g, '":"')}"}`;
    return JSON.parse(s, function (key, value) {
        return key === "" ? value : decodeURIComponent(value)
    });
}