import { firstBy } from "thenby";
import { compareUnknown } from "./util";
/**
 * @typedef {Object} SortColumn
 * @property {String} column
 * @property {Boolean} ascending
 */
/**
 * Sorts objects according to the given sort array (sort by, then by)
 * @param {Array<Object>} objects
 * @param {Array<SortColumn>} columns : sorts objects according to this parameter
 * @returns {Array<Object>}
 */
export function sortObjects(objects, columns) {
    function build(cols) {
        var c0 = cols[0];
        var k = firstBy(function (a, b) {
            return compareUnknown(a[c0.col], b[c0.col]);
        }, c0.direction);
        for (let i = 1; i < cols.length; i++) {
            const c = cols[i];
            k = k.thenBy(function (a, b) {
                return compareUnknown(a[c.col], b[c.col]);
            }, c.direction);
        }
        return k;
    }
    if (_.isNil(objects) || objects.length === 0 || _.isNil(columns) || columns.length === 0) {
        return objects;
    }
    const cols = columns.map(function (c) {
        return {
            col: c.column,
            direction: c.ascending ? 1 : -1
        };
    })
    var res = [];
    objects.forEach(o => {
        res.push(o);
    });
    res.sort(build(cols));
    return res;
};

export { firstBy, compareUnknown }