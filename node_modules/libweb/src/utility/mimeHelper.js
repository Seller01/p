import mime from 'mime';
import {UrlParser} from "./url";

class MimeHelper {
    constructor() {
        this.options = {
            /**
             * Path to file icons on server
             */
            fileIconPath: null
        };
        this.urlParser = new UrlParser();
    }
    
    /**
     * Set options for mime helper
     * @param {Object} options
     * @param {String} options.fileIconPath
     * @returns {void}
     */
    setOptions(options) {
        this.options = Object.assign({}, this.options, options);
    }
    
    /**
     * Gets file extension for the given media type
     * @param {String} mediaType
     * @returns {String}
     */
    getExtension(mediaType) {
        const res = mime.getExtension(mediaType);
        if (res === undefined || res === null || res.length === 0 || res.startsWith('.')) {
            return '.xpi';
        }
        return `.${res}`;
    }
    
    /**
     * Gets media type for the given file extension or file path
     * @param {String} extensionOrFilePath
     * @returns {String}
     */
    getMediaType(extensionOrFilePath) {
        return mime.getType(extensionOrFilePath);
    }
    
    /**
     * Gets icon path for the given file extension
     * @param {String} extension
     * @param {Number} size: 16, 24, 48, 64, 128
     * @param {String} type: png | gif
     * @retruns {String}
     */
    getIconPathForExtension(extension, size = 48, type = 'png') {
        const fileIconPath = this.options.fileIconPath;
        const path = fileIconPath.endsWith("/") ? fileIconPath.substr(0, fileIconPath.length - 1) : fileIconPath;
        const e = extension.startsWith(".") ? extension.substr(1, extension.length - 1) : extension;
        return `${path}/${e}-icon-${size}x${size}.${type}`;
    }
    
    /**
     * Gets icon path for the given file url
     * @param {String} url
     * @param {Number} size: 16, 24, 48, 64, 128
     * @param {String} type: png | gif
     * @retruns {String}
     */
    getIconPathForUrl(url, size = 48, type = 'png') {
        const x = this.urlParser.parse(url).pathname;
        const fileName = x.substr(x.lastIndexOf('/') + 1);
        const mediaType = this.getMediaType(fileName);
        const extension = this.getExtension(mediaType);
        return this.getIconPathForExtension(extension, size, type);
    }
    
    /**
     * @typedef {Object} FileIconPathResult
     * @property {Boolean} found
     * @property {String} icon
     */
    /**
     * Gets icon path for the given file. If found property of result is false and the file is an image,
     * the path property in result will contain actual data of file as data-url
     * @param {File} file
     * @param {function(FileIconPathResult)} done
     * @param {Number} size 16, 24, 48, 64, 128
     * @param {String} type png | gif
     * @returns {void}
     */
    getIconPathForFile(file, done, size = 48, type = 'png') {
        const fileReader = new FileReader();
        const fileType = this.getMediaType(file.name);
        if (fileType.startsWith("image/")) {
            //read thumb
            fileReader.onload = () => {
                done({
                    found: false,
                    icon: fileReader.result
                });
            };
            fileReader.readAsDataURL(file);
            return;
        }
        const extension = this.getExtension(fileType);
        const iconPath = this.getIconPathForExtension(extension, size, type);
        done({
            found: true,
            icon: iconPath
        });
    }
}

const mimeHelper = new MimeHelper();
export {mimeHelper}
