import { Url, UrlParser } from "./url";
class Thumber {
    constructor() {
        /**
         * Valid extensions
         * @type {String}
         */
        this.extensions = 'png, jpg, jpeg, bmp';
        /**
         * Width parameter name
         * @type {String}
         */
        this.widthParameterName = 'w';
        /**
         * Height parameter name
         * @type {String}
         */
        this.heightParameterName = 'h';
        /**
         * Quality parameter name
         * @type {String}
         */
        this.qualityParameterName = 'q';
    }
    /**
     * Set options
     * @param {String} extensions Valid extensions. default: 'png, jpg, jpeg, bmp'
     * @param {String} widthParameterName Width parameter name. default: 'w'
     * @param {String} heightParameterName Height parameter name. default: 'h'
     * @param {String} qualityParameterName Quality parameter name. default: 'q'
     */
    setOptions(extensions, widthParameterName, heightParameterName, qualityParameterName) {
        this.extensions = extensions;
        this.widthParameterName = widthParameterName;
        this.heightParameterName = heightParameterName;
        this.qualityParameterName = qualityParameterName;
    }
    /**
     * Gets Thumb Url object for a given image
     * @param {String} imagePath url
     * @param {Number} quality value between 0 and 100
     * @param {Number} width width of image. set null to ignore
     * @param {Number} height height of image. set null to ignore
     * @returns {Url}
     */
    create(imagePath, quality = 100, width = null, height = null) {
        if (_.isNil(imagePath)) {
            return;
        }
        var o = {};
        if (!_.isNil(quality)) {
            o[this.qualityParameterName] = quality.toString();
        }
        if (!_.isNil(width)) {
            o[this.widthParameterName] = width.toString();
        }
        if (!_.isNil(height)) {
            o[this.heightParameterName] = height.toString();
        }
        const urlParser = new UrlParser();
        var k = urlParser.parse(imagePath);
        k.query = Object.assign({}, k.query, o);
        return k;
    }
    /**
     * Gets Thumb url for a given image
     * @param {String} imagePath url
     * @param {Number} quality value between 0 and 100
     * @param {Number} width width of image. set null to ignore
     * @param {Number} height height of image. set null to ignore
     * @returns {String}
     */
    absolute(imagePath, quality = 100, width = null, height = null) {
        var k = this.create(imagePath, quality, width, height);
        return k.toAbsolute();
    }
    /**
     * Gets Thumb url for a given image
     * @param {String} imagePath url
     * @param {Number} quality value between 0 and 100
     * @param {Number} width width of image. set null to ignore
     * @param {Number} height height of image. set null to ignore
     * @returns {String}
     */
    relative(imagePath, quality = 100, width = null, height = null) {
        var k = this.create(imagePath, quality, width, height);
        return k.toRelative();
    }
}

const thumber = new Thumber();
export { thumber }