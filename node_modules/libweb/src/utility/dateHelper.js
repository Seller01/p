import { ServerValues } from "./ServerValues";
class DateHelper {
    getCulture() {
        const sv = new ServerValues().getValues();
        return sv['culture'];
    }
    /**
     * Returns a pretty date time format. 
     * culture === 'fa' ? 'dddd jDD jMMMM jYYYY HH:mm' : 'dddd DD MMMM YYYY HH:mm'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    getPrettyDateTimeFormat(culture) {
        if (culture === undefined || culture === null) {
            culture = this.getCulture();
        }
        return culture === 'fa' ? 'dddd jDD jMMMM jYYYY HH:mm' : 'dddd DD MMMM YYYY HH:mm';
    }
    /**
     * Returns a pretty date format. 
     * culture === 'fa' ? 'dddd jDD jMMMM jYYYY' : 'dddd DD MMMM YYYY'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    getPrettyDateFormat(culture) {
        if (culture === undefined || culture === null) {
            culture = this.getCulture();
        }
        return culture === 'fa' ? 'dddd jDD jMMMM jYYYY' : 'dddd DD MMMM YYYY';
    }
    /**
     * Returns a simple date time format
     * culture === 'fa' ? 'jYYYY/jMM/jDD HH:mm:ss' : 'YYYY/MM/DD HH:mm:ss'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    getSimpleDateTimeFormat(culture) {
        if (culture === undefined || culture === null) {
            culture = this.getCulture();
        }
        return culture === 'fa' ? 'jYYYY/jMM/jDD HH:mm:ss' : 'YYYY/MM/DD HH:mm:ss';
    }
    /**
     * Returns a simple date time format
     * culture === 'fa' ? 'jYYYY/jMM/jDD' : 'YYYY/MM/DD'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    getSimpleDateFormat(culture) {
        if (culture === undefined || culture === null) {
            culture = this.getCulture();
        }
        return culture === 'fa' ? 'jYYYY/jMM/jDD' : 'YYYY/MM/DD';
    }
    /**
     * converts the given unix milliseconds to string
     * @param {Number} ms unix milliseconds
     * @param {String} format date time format. default: simple date time format
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    formatUnixMs(ms, format, culture) {
        if (culture === undefined || culture === null) {
            culture = this.getCulture();
        }
        var f = this.getSimpleDateTimeFormat(culture);
        if (format !== undefined && format !== null) {
            f = format;
        }
        return moment(ms).locale(culture).format(f);
    }
    /**
     * converts the given unix ticks to string
     * @param {Number} ms unix ticks
     * @param {String} format date time format. default: simple date time format
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */
    formatTicks(ticks, format, culture) {
        return this.formatUnixMs(ticks / 10000, format, culture);
    }
}

const dateHelper = new DateHelper();
export { dateHelper }