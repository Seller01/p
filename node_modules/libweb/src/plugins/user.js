import { ServerValues } from "../utility/ServerValues";
export class User {
    constructor() {
        var sv = new ServerValues().getValues();
        var u = sv['user'];
        /**
         * @type {Boolean}
         */
        this.isAuthenticated = u.IsAuthenticated;
        /**
         * @type {String}
         */
        this.id = u.Id;
        /**
         * @type {String}
         */
        this.userName = u.UserName;
        /**
         * @type {Array<String>}
         */
        this.roles = u.Roles;
        /**
         * @type {Array<String>}
         */
        this.permissions = u.Permissions;
        /**
         * @type {String}
         */
        this.token = u.Token;
    }
    /**
     * 
     * @param {String} roleName 
     * @returns {String}
     */
    findRole(roleName) {
        var i = this.roles.findIndex(a => a.toLowerCase() === roleName.toLowerCase());
        if (i > -1) {
            return this.roles[i];
        }
        return null;
    }
    /**
     * 
     * @param {String} permission 
     * @returns {String}
     */
    findPermission(permission) {
        var i = this.permissions.findIndex(a => a.toLowerCase() === permission.toLowerCase());
        if (i > -1) {
            return this.permissions[i];
        }
        return null;
    }
    /**
     * 
     * @param {String} role role
     * @returns {Boolean}
     */
    isInRole(role) {
        return this.isAdmin() || (this.isAuthenticated && this.findRole(role) !== null);
    }
    /**
     * @returns {Boolean}
     */
    isAdmin() {
        return this.isAuthenticated && this.findRole('admin') !== null;
    }
    /**
     * 
     * @param {Array<String>} permissions 
     * @returns {Boolean}
     */
    hasAccessAny(permissions) {
        if (!this.isAuthenticated) {
            return false;
        }
        if (this.isAdmin() || permissions === undefined || permissions === null || permissions.length === 0) {
            return true;
        }
        var found = false;
        for (let i = 0; i < permissions.length; i++) {
            const p = permissions[i];
            found = this.findPermission(p) !== null;
            if (found) {
                break;
            }
        }
        return found;
    }
    /**
     * 
     * @param {String} permission 
     * @returns {Boolean}
     */
    hasAccess(permission) {
        if (permission === undefined || permission === null || permission.length === 0) {
            return this.isAuthenticated;
        }
        var permissions = [];
        permissions.push(permission);
        return this.hasAccessAny(permissions);
    }
    /**
     * 
     * @param {Array<String>} permissions 
     * @returns {Boolean}
     */
    hasAccessAll(permissions) {
        if (!this.isAuthenticated) {
            return false;
        }
        if (this.isAdmin() || permissions === undefined || permissions === null || permissions.length === 0) {
            return true;
        }
        for (let i = 0; i < permissions.length; i++) {
            const p = permissions[i];
            var found = this.findPermission(p) !== null;
            if (!found) {
                return false;
            }
        }
        return true;
    }
}
const user = new User();
export default {
    user,
    install(Vue, options) {
        Vue.prototype.$user = user;
    }
}