import { QueryMedia } from "../../utility/QueryMedia";

const queryMedia = new QueryMedia();

function toPixelString(v) {
    return `${v}px`;
}
function toPixelStringDown(v) {
    v = v - 0.02;
    return `${v}px`;
}
export function responsiveMixin(xsPixels = 576, smPixels = 768, mdPixels = 992, lgPixels = 1200) {
    return {
        created() {
            this.$nextTick(function () {
                queryMedia.run(`(max-width: ${toPixelStringDown(xsPixels)})`, true, isMatch => {
                    this.$store.commit('setBreakpoints', {
                        variable: 'xs',
                        isMatch: isMatch
                    })
                })
                queryMedia.run(`(min-width: ${toPixelString(xsPixels)}) and (max-width: ${toPixelStringDown(smPixels)})`,
                    true, isMatch => {
                        this.$store.commit('setBreakpoints', {
                            variable: 'sm',
                            isMatch: isMatch
                        });
                    });
                queryMedia.run(`(min-width: ${toPixelString(smPixels)}) and (max-width: ${toPixelStringDown(mdPixels)})`,
                    true, isMatch => {
                        this.$store.commit('setBreakpoints', {
                            variable: 'md',
                            isMatch: isMatch
                        });
                    });
                queryMedia.run(`(min-width: ${toPixelString(mdPixels)}) and (max-width: ${toPixelStringDown(lgPixels)})`,
                    true, isMatch => {
                        this.$store.commit('setBreakpoints', {
                            variable: 'lg',
                            isMatch: isMatch
                        });
                    });
                queryMedia.run(`(min-width: ${toPixelString(lgPixels)})`, true, isMatch => {
                    this.$store.commit('setBreakpoints', {
                        variable: 'lg',
                        isMatch: isMatch
                    });
                });
            });
        }
    }
}