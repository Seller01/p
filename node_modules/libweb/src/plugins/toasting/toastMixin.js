import loc from './toastMixin.i18n.json';
import { Translator } from "../../utility/Translator";
import { ServerValues } from "../../utility/ServerValues";
const sv = new ServerValues().getValues();
const tr = new Translator(sv['culture'], sv['fallback-culture'], loc);
export default {
    methods: {
        async toastAsk(message = undefined, title = undefined) {
            const _message = message || tr.t('sure');
            const _title = title || tr.t('notice');
            try {
                const o = {
                    title: _title,
                    size: 'md',
                    buttonSize: 'lg',
                    okVariant: 'warning',
                    okTitle: tr.t('ok'),
                    cancelVariant: 'default',
                    cancelTitle: tr.t('cancel'),
                    footerClass: 'p-2',
                    hideHeaderClose: false,
                    centered: true
                };
                return await this.$bvModal.msgBoxConfirm(_message, o);
            } catch (error) {
                return false;
            }
        },
        /**
         * https://bootstrap-vue.org/docs/components/toast#toaster-target
         */
        toastSuccess(message = undefined, title = undefined, variant = 'success', delay = 3000,
            position = 'b-toaster-top-center') {
            this.toast({
                title: title,
                variant: variant,
                message: message || tr.t('success'),
                delay: delay,
                position: position
            });
        },
        toastError(message = undefined, title = undefined, variant = 'danger', delay = 5000,
            position = 'b-toaster-top-center') {
            this.toast({
                title: title,
                variant: variant,
                message: message || tr.t('err'),
                delay: delay,
                position: position
            });
        },
        toast({ variant, title = undefined, message, delay = 3000, position = 'b-toaster-top-center' }) {
            const _title = title || tr.t('notice');
            const _autoHideDelay = delay < 1000 ? 1000 : delay;
            const _noAutoHide = delay <= 0;
            const o = {
                title: _title,
                autoHideDelay: _autoHideDelay,
                noAutoHide: _noAutoHide,
                variant: variant,
            };
            if (!_.isNil(position)) {
                o['toaster'] = position;
            }
            const h = this.$createElement;
            let _message = message;
            if (_.isArray(message)) {
                const els = [];
                message.forEach(m => {
                    els.push(h(
                        'p',
                        { class: ['text-left', 'mb-1'] },
                        [
                            h('b-spinner', { props: { type: 'grow', small: true }, class: ['mr-1'] }),
                            m
                        ]
                    ));
                });
                _message = h('p', { class: ['text-left', 'mb-0'] }, els);
            }
            this.$bvToast.toast([_message], o);
        }
    }
}