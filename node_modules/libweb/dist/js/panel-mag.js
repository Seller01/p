(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("Vue"));
	else if(typeof define === 'function' && define.amd)
		define(["Vue"], factory);
	else if(typeof exports === 'object')
		exports["libweb"] = factory(require("Vue"));
	else
		root["libweb"] = factory(root["Vue"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_vue__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/panel/mag/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/mag/WPosts.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/components/mag/WPosts.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _WPosts_i18n_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WPosts.i18n.json */ "./src/components/mag/WPosts.i18n.json");
var _WPosts_i18n_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./WPosts.i18n.json */ "./src/components/mag/WPosts.i18n.json", 1);
/* harmony import */ var _utility_VueI18n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utility/VueI18n */ "./src/utility/VueI18n.js");
/* harmony import */ var _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utility/dateHelper */ "./src/utility/dateHelper.js");


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
  i18n: Object(_utility_VueI18n__WEBPACK_IMPORTED_MODULE_3__["i18n"])(_WPosts_i18n_json__WEBPACK_IMPORTED_MODULE_2__),
  props: {
    value: {
      default: false
    },
    containerName: {
      default: ''
    },
    containerId: {
      default: ''
    },
    title: {
      default: ''
    },
    // array of {code, direction, name}
    langs: {
      default: function _default() {
        return [];
      }
    }
  },
  data: function data() {
    return {
      dateHelper: _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"],
      visible: false,
      posts: [],
      postCols: [{
        header: this.$t('id'),
        field: 'id',
        visible: false,
        sortable: false
      }, {
        header: this.$t('publishFrom'),
        field: 'publishFrom',
        sortField: 'publishFromMs',
        sortable: false
      }, {
        header: this.$t('publishUntil'),
        field: 'publishUntilMs',
        sortField: 'publishUntilMs',
        sortable: false
      }, {
        header: this.$t('name'),
        field: 'name',
        sortable: false
      }, {
        header: this.$t('author'),
        field: 'author',
        sortable: false
      }, {
        header: this.$t('lastEditor'),
        field: 'lastEditor',
        sortable: false
      }, {
        header: this.$t('oprations'),
        field: 'opr',
        sortable: false
      }],
      modal: {
        item: {},
        visible: false,
        title: '',
        isNew: false
      }
    };
  },
  methods: {
    getLangs: function getLangs() {
      return this.langs;
    },
    isEmpty: function isEmpty(a) {
      return a === undefined || a === null || a.length === 0;
    },
    isVoid: function isVoid(a) {
      return a === undefined || a === null;
    },
    convert: function convert(a) {
      a.createDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"].formatTicks(a.createUtc);
      a.updateDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"].formatTicks(a.updateUtc);
      a.removing = false;
      a.publishFrom = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"].formatUnixMs(a.publishFromMs);
      a.hasPublishUntil = !this.isVoid(a.publishUntilMs);

      if (this.isVoid(a.publishUntilMs)) {
        a.publishUntilMs = moment().valueOf();
      }

      return a;
    },
    empty: function empty() {
      var nowTicks = moment().valueOf() * 10000;
      var res = {
        id: '',
        createUtc: nowTicks,
        updateUtc: nowTicks,
        description: '',
        containerName: '',
        containerId: '',
        publishFromMs: moment().valueOf(),
        publishUntilMs: moment().add('years', 1).valueOf(),
        hasPublishUntil: true,
        authorId: '',
        lastEditorId: '',
        name: '',
        authorName: '',
        authorUserName: '',
        authorEmail: '',
        authorPhoneNumber: '',
        lastEditorName: '',
        lastEditorUserName: '',
        lastEditorEmail: '',
        lastEditorPhoneNumber: ''
      };
      return this.convert(res);
    },
    onShown: function onShown() {
      var _this = this;

      setTimeout(function () {
        _this.$refs.table.refresh();
      }, 1500);
    },
    onHidden: function onHidden() {},
    loadPosts: function loadPosts(args) {
      var _this2 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var search, page, rowsPerPage, sorts, callback, response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                search = args.search, page = args.page, rowsPerPage = args.rowsPerPage, sorts = args.sorts, callback = args.callback;

                if (!(_this2.isEmpty(_this2.containerName) || _this2.isEmpty(_this2.containerId))) {
                  _context.next = 5;
                  break;
                }

                callback([], 0);
                return _context.abrupt("return");

              case 5:
                _context.next = 7;
                return _this2.$api.post('/api/blog/Post/ViewPosts', {
                  search: search,
                  page: page,
                  rowsPerPage: rowsPerPage,
                  sorts: sorts,
                  containerName: _this2.containerName,
                  containerId: _this2.containerId
                });

              case 7:
                response = _context.sent;
                callback(response.rows.map(function (a) {
                  return _this2.convert(a);
                }), response.totalRows);
                _context.next = 15;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](0);

                _this2.toastError(_context.t0);

                console.error(_context.t0);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 11]]);
      }))();
    },
    startAdd: function startAdd() {
      var _this3 = this;

      this.modal.item = Object.assign({}, this.empty());
      this.modal.isNew = true;
      this.modal.title = this.$t('add-new-post');
      this.modal.visible = true;
      this.$nextTick( /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this3.$refs.pt.onShown();

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    },
    startEdit: function startEdit(item) {
      var _this4 = this;

      this.modal.item = Object.assign({}, item);
      this.modal.isNew = false;
      this.modal.title = this.$t('edit-post');
      this.modal.visible = true;
      this.$nextTick( /*#__PURE__*/_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this4.$refs.pt.onShown();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
    },
    save: function save() {
      var _this5 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
        var item, args, post, rows, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                item = _this5.modal.item;
                _context4.prev = 1;
                _this5.modal.saving = true;
                args = {
                  publishFromMs: item.publishFromMs,
                  publishUntilMs: item.hasPublishUntil ? item.publishUntilMs : null,
                  description: item.description,
                  name: item.name
                };

                if (!_this5.modal.isNew) {
                  _context4.next = 14;
                  break;
                }

                // add
                args.containerName = _this5.containerName;
                args.containerId = _this5.containerId;
                _context4.next = 9;
                return _this5.$api.post('/api/blog/Post/AddPost', args);

              case 9:
                post = _context4.sent;

                _this5.$refs.table.addRow(_this5.convert(post)); // close the modal to let translations open next time on edit


                _this5.modal.visible = false;
                _context4.next = 21;
                break;

              case 14:
                // update
                args.id = item.id;
                _context4.next = 17;
                return _this5.$api.post('/api/blog/Post/UpdatePost', args);

              case 17:
                post = _context4.sent;
                rows = _this5.$refs.table.getRows();
                i = rows.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this5.$refs.table.updateRow(_this5.convert(post), i);
                }

              case 21:
                _this5.toastSuccess();

                _context4.next = 28;
                break;

              case 24:
                _context4.prev = 24;
                _context4.t0 = _context4["catch"](1);

                _this5.toastError(_context4.t0);

                console.error(_context4.t0);

              case 28:
                _context4.prev = 28;
                _this5.modal.saving = false;
                return _context4.finish(28);

              case 31:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[1, 24, 28, 31]]);
      }))();
    },
    remove: function remove(item) {
      var _this6 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5() {
        var rows, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return _this6.toastAsk();

              case 2:
                if (!_context5.sent) {
                  _context5.next = 20;
                  break;
                }

                _context5.prev = 3;
                item.removing = true;
                _context5.next = 7;
                return _this6.$api.post('/api/blog/Post/DeletePost', {
                  id: item.id
                });

              case 7:
                _this6.toastSuccess();

                rows = _this6.$refs.table.getRows();
                i = rows.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this6.$refs.table.deleteRow(i);
                }

                _context5.next = 17;
                break;

              case 13:
                _context5.prev = 13;
                _context5.t0 = _context5["catch"](3);

                _this6.toastError(_context5.t0);

                console.error(_context5.t0);

              case 17:
                _context5.prev = 17;
                item.removing = false;
                return _context5.finish(17);

              case 20:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[3, 13, 17, 20]]);
      }))();
    }
  },
  computed: {
    canView: function canView() {
      return this.$user.hasAccess('blog_ViewPosts');
    },
    canAdd: function canAdd() {
      return this.$user.hasAccess('blog_AddPost');
    },
    canEdit: function canEdit() {
      return this.$user.hasAccess('blog_EditPost');
    },
    canDelete: function canDelete() {
      return this.$user.hasAccess('blog_DeletePost');
    },
    nameState: function nameState() {
      return !this.isEmpty(this.modal.item.name);
    },
    invalidName: function invalidName() {
      if (this.nameState) {
        return '';
      }

      return this.$t('name-required');
    }
  },
  watch: {
    value: function value() {
      if (this.value === this.visible) {
        return;
      }

      this.visible = this.value;
    },
    visible: function visible() {
      if (this.visible) {
        this.onShown();
      } else {
        this.onHidden();
      }

      if (this.value === this.visible) {
        return;
      }

      this.$emit('input', this.visible);
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/Categories.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/panel/mag/Categories.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utility_guid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utility/guid */ "./src/utility/guid.js");
/* harmony import */ var _Categories_i18n_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Categories.i18n.json */ "./src/panel/mag/Categories.i18n.json");
var _Categories_i18n_json__WEBPACK_IMPORTED_MODULE_3___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./Categories.i18n.json */ "./src/panel/mag/Categories.i18n.json", 1);
/* harmony import */ var _CategoryTranslations_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CategoryTranslations.vue */ "./src/panel/mag/CategoryTranslations.vue");
/* harmony import */ var _components_mag_WPosts_vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/mag/WPosts.vue */ "./src/components/mag/WPosts.vue");
/* harmony import */ var _utility_VueI18n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utility/VueI18n */ "./src/utility/VueI18n.js");
/* harmony import */ var _utility_dateHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utility/dateHelper */ "./src/utility/dateHelper.js");


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//






/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    CategoryTranslations: _CategoryTranslations_vue__WEBPACK_IMPORTED_MODULE_4__["default"],
    WPosts: _components_mag_WPosts_vue__WEBPACK_IMPORTED_MODULE_5__["default"]
  },
  i18n: Object(_utility_VueI18n__WEBPACK_IMPORTED_MODULE_6__["i18n"])(_Categories_i18n_json__WEBPACK_IMPORTED_MODULE_3__),
  props: {
    // array of {code, direction, name}
    langs: {
      default: function _default() {
        return [];
      }
    }
  },
  data: function data() {
    return {
      emptyParentId: _utility_guid__WEBPACK_IMPORTED_MODULE_2__["guid"].empty(),
      ready: false,
      categories: [],
      modal: {
        title: '',
        visible: false,
        isNew: false,
        saving: false,
        item: {}
      },
      translationsVisible: false,
      category: {},
      postsVisible: false,
      postsTitle: ''
    };
  },
  mounted: function mounted() {
    var _this = this;

    return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this.loadCategories();

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  methods: {
    getLangs: function getLangs() {
      return this.langs;
    },
    isEmpty: function isEmpty(a) {
      return a === undefined || a === null || a.length === 0;
    },
    convert: function convert(a) {
      a.createDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_7__["dateHelper"].formatTicks(a.createUtc);
      a.updateDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_7__["dateHelper"].formatTicks(a.updateUtc);
      a.removing = false;
      a.togglingVisibility = false;
      return a;
    },
    empty: function empty() {
      var nowTicks = moment().valueOf() * 10000;
      var res = {
        id: '',
        createUtc: nowTicks,
        updateUtc: nowTicks,
        description: '',
        parentId: '',
        order: 0,
        name: '',
        visible: false
      };
      return this.convert(res);
    },
    loadCategories: function loadCategories() {
      var _this2 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
        var list;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _this2.ready = false;
                _context2.next = 4;
                return _this2.$api.get('/api/mag/Category/ViewCategories');

              case 4:
                list = _context2.sent;
                list.forEach(function (a) {
                  _this2.categories.push(_this2.convert(a));
                });
                _this2.ready = true;
                _context2.next = 13;
                break;

              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](0);

                _this2.toastError(_context2.t0);

                console.error(_context2.t0);

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 9]]);
      }))();
    },
    startAdd: function startAdd(parentId, e) {
      e.stopPropagation();
      this.modal.title = this.$t('add-new-category');
      this.modal.isNew = true;
      this.modal.item = Object.assign({}, this.empty());

      if (!this.isEmpty(parentId)) {
        this.modal.item.parentId = parentId;
      }

      this.modal.visible = true;
    },
    startEdit: function startEdit(item, e) {
      e.stopPropagation();
      this.modal.title = this.$t('edit-category');
      this.modal.isNew = false;
      this.modal.item = Object.assign({}, item);
      this.modal.visible = true;
    },
    save: function save() {
      var _this3 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {
        var item, args, category, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                item = _this3.modal.item;
                _context3.prev = 1;
                _this3.modal.saving = true;

                if (!_this3.modal.isNew) {
                  _context3.next = 11;
                  break;
                }

                // add
                args = {
                  parentId: item.parentId,
                  name: item.name,
                  visible: item.visible
                };
                _context3.next = 7;
                return _this3.$api.post('/api/mag/Category/AddCategory', args);

              case 7:
                category = _context3.sent;

                _this3.categories.push(_this3.convert(category));

                _context3.next = 16;
                break;

              case 11:
                // update
                args = {
                  id: item.id,
                  name: item.name,
                  visible: item.visible
                };
                _context3.next = 14;
                return _this3.$api.post('/api/mag/Category/UpdateCategory', args);

              case 14:
                i = _this3.categories.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this3.$set(_this3.categories, i, item);
                }

              case 16:
                _this3.toastSuccess();

                _this3.modal.visible = false;
                _context3.next = 24;
                break;

              case 20:
                _context3.prev = 20;
                _context3.t0 = _context3["catch"](1);

                _this3.toastError(_context3.t0);

                console.error(_context3.t0);

              case 24:
                _context3.prev = 24;
                _this3.modal.saving = false;
                return _context3.finish(24);

              case 27:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[1, 20, 24, 27]]);
      }))();
    },
    getSelfAndDescendants: function getSelfAndDescendants(node) {
      var _this4 = this;

      var recurse = function recurse(a) {
        var res = [a];

        var children = _this4.categories.filter(function (a) {
          return a.parentId === a.id;
        });

        if (children.length > 0) {
          children.forEach(function (c) {
            var k = recurse(c);
            k.forEach(function (cc) {
              res.push(cc);
            });
          });
        }

        return res;
      };

      return recurse(node);
    },
    remove: function remove(item, e) {
      var _this5 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
        var itemAndDescendants, indices, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                e.stopPropagation();
                _context4.next = 3;
                return _this5.toastAsk();

              case 3:
                if (!_context4.sent) {
                  _context4.next = 22;
                  break;
                }

                _context4.prev = 4;
                item.removing = true;
                _context4.next = 8;
                return _this5.$api.post('/api/mag/Category/DeleteCategory', {
                  id: item.id
                });

              case 8:
                _this5.toastSuccess();

                itemAndDescendants = _this5.getSelfAndDescendants(item);
                indices = itemAndDescendants.map(function (a) {
                  return _this5.categories.findIndex(function (c) {
                    return a.id === c.id;
                  });
                });
                indices.sort(function (a, b) {
                  return b - a;
                });

                for (i = indices.length - 1; i >= 0; i--) {
                  _this5.categories.splice(indices[i], 1);
                }

                _context4.next = 19;
                break;

              case 15:
                _context4.prev = 15;
                _context4.t0 = _context4["catch"](4);

                _this5.toastError(_context4.t0);

                console.error(_context4.t0);

              case 19:
                _context4.prev = 19;
                item.removing = false;
                return _context4.finish(19);

              case 22:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[4, 15, 19, 22]]);
      }))();
    },
    toggleVisibility: function toggleVisibility(item, e) {
      var _this6 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5() {
        var args, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                e.stopPropagation();
                _context5.next = 3;
                return _this6.toastAsk();

              case 3:
                if (!_context5.sent) {
                  _context5.next = 22;
                  break;
                }

                _context5.prev = 4;
                item.togglingVisibility = true;
                args = {
                  id: item.id,
                  name: item.name,
                  visible: !item.visible
                };
                _context5.next = 9;
                return _this6.$api.post('/api/mag/Category/UpdateCategory', args);

              case 9:
                item.visible = !item.visible;
                i = _this6.categories.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this6.$set(_this6.categories, i, item);
                }

                _this6.toastSuccess();

                _context5.next = 19;
                break;

              case 15:
                _context5.prev = 15;
                _context5.t0 = _context5["catch"](4);

                _this6.toastError(_context5.t0);

                console.error(_context5.t0);

              case 19:
                _context5.prev = 19;
                item.togglingVisibility = false;
                return _context5.finish(19);

              case 22:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[4, 15, 19, 22]]);
      }))();
    },
    onMove: function onMove() {
      var _arguments = arguments,
          _this7 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6() {
        var _arguments$, node, parentNode, parentChildren, completed, nodeId, nodeName, parentId, childrenIds, children, parentName, args;

        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _arguments$ = _arguments[0], node = _arguments$.node, parentNode = _arguments$.parentNode, parentChildren = _arguments$.parentChildren, completed = _arguments$.completed;
                nodeId = node.data.id;
                nodeName = node.data.name;
                parentId = parentNode === undefined || parentNode === null ? _this7.emptyParentId : parentNode.data.id;
                childrenIds = parentChildren.map(function (a) {
                  return a.data.id;
                });
                children = childrenIds.map(function (id) {
                  return _this7.categories.find(function (c) {
                    return id === c.id;
                  });
                }); // log

                parentName = parentNode === undefined || parentNode === null ? '-' : parentNode.data.name;
                console.log(parentId, parentName, children.map(function (a) {
                  return a.name;
                }));
                _context6.prev = 8;
                args = {
                  id: nodeId,
                  parentId: parentId,
                  orderItems: children.map(function (a, i) {
                    return {
                      id: a.id,
                      order: i
                    };
                  })
                };
                _context6.next = 12;
                return _this7.$api.post('/api/mag/Category/MoveCategory', args);

              case 12:
                _this7.toastSuccess();

                setTimeout(function () {
                  window.location.reload(true);
                }, 1500);
                _context6.next = 20;
                break;

              case 16:
                _context6.prev = 16;
                _context6.t0 = _context6["catch"](8);

                _this7.toastError(_context6.t0);

                console.error(_context6.t0);

              case 20:
                _context6.prev = 20;
                completed();
                return _context6.finish(20);

              case 23:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, null, [[8, 16, 20, 23]]);
      }))();
    },
    showTranslations: function showTranslations(item, e) {
      e.stopPropagation();
      this.category = item;
      this.translationsVisible = true;
    },
    showPosts: function showPosts(item, e) {
      e.stopPropagation();
      this.category = item;
      this.postsTitle = this.$t('category-posts', [this.category.name]);
      this.postsVisible = true;
    }
  },
  computed: {
    canViewCategories: function canViewCategories() {
      return this.$user.hasAccess('mag_ViewCategories');
    },
    canAddCategory: function canAddCategory() {
      return this.$user.hasAccess('mag_AddCategory');
    },
    canEditCategory: function canEditCategory() {
      return this.$user.hasAccess('mag_UpdateCategory');
    },
    canDeleteCategory: function canDeleteCategory() {
      return this.$user.hasAccess('mag_DeleteCategory');
    },
    nameState: function nameState() {
      return !this.isEmpty(this.modal.item.name);
    },
    invalidName: function invalidName() {
      if (this.nameState) {
        return '';
      }

      return this.$t('name-required');
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _CategoryTranslations_i18n_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CategoryTranslations.i18n.json */ "./src/panel/mag/CategoryTranslations.i18n.json");
var _CategoryTranslations_i18n_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./CategoryTranslations.i18n.json */ "./src/panel/mag/CategoryTranslations.i18n.json", 1);
/* harmony import */ var _utility_VueI18n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utility/VueI18n */ "./src/utility/VueI18n.js");
/* harmony import */ var _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utility/dateHelper */ "./src/utility/dateHelper.js");


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
  i18n: Object(_utility_VueI18n__WEBPACK_IMPORTED_MODULE_3__["i18n"])(_CategoryTranslations_i18n_json__WEBPACK_IMPORTED_MODULE_2__),
  props: {
    value: {
      default: false
    },
    category: {
      default: function _default() {
        return {};
      }
    },
    // array of {code, direction, name}
    langs: {
      default: function _default() {
        return [];
      }
    }
  },
  data: function data() {
    return {
      visible: false,
      translations: [],
      cols: [{
        header: this.$t('id'),
        field: 'id',
        visible: false,
        sortable: false
      }, {
        header: this.$t('culture'),
        field: 'culture'
      }, {
        header: this.$t('name'),
        field: 'name'
      }, {
        header: this.$t('title'),
        field: 'title'
      }, {
        header: this.$t('subtitle'),
        field: 'subtitle',
        visible: false
      }, {
        header: this.$t('createDateTime'),
        field: 'createDateTime'
      }, {
        header: this.$t('updateDateTime'),
        field: 'updateDateTime'
      }, {
        header: this.$t('operations'),
        field: 'opr',
        sortable: false
      }],
      modal: {
        title: '',
        isNew: false,
        item: {},
        visible: false,
        saving: false
      },
      cultures: this.langs.map(function (a) {
        return {
          text: a.name,
          value: a.code
        };
      })
    };
  },
  methods: {
    isEmpty: function isEmpty(a) {
      return a === undefined || a === null || a.length === 0;
    },
    isVoid: function isVoid(a) {
      return a === undefined || a === null;
    },
    convert: function convert(a) {
      a.createDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"].formatTicks(a.createUtc);
      a.updateDateTime = _utility_dateHelper__WEBPACK_IMPORTED_MODULE_4__["dateHelper"].formatTicks(a.updateUtc);
      a.removing = false;
      a.thumbArray = this.isEmpty(a.thumbs) ? [] : a.thumbs.split('|');
      return a;
    },
    empty: function empty() {
      var nowTicks = moment().valueOf() * 10000;
      var res = {
        id: '',
        createUtc: nowTicks,
        updateUtc: nowTicks,
        description: '',
        categoryId: '',
        name: '',
        title: '',
        subtitle: '',
        thumbs: '',
        culture: ''
      };
      return this.convert(res);
    },
    getCategory: function getCategory() {
      if (this.isVoid(this.category)) {
        return {};
      }

      return this.category;
    },
    onShown: function onShown() {
      var _this = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var list;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;

                _this.translations.splice(0, _this.translations.length);

                _context.next = 4;
                return _this.$api.post('/api/mag/Category/ViewCategoryTranslations', {
                  categoryId: _this.category.id
                });

              case 4:
                list = _context.sent;
                list.forEach(function (a) {
                  _this.translations.push(_this.convert(a));
                });
                _context.next = 13;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);

                _this.toastError(_context.t0);

                console.error(_context.t0); // close

                _this.visible = false;

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 8]]);
      }))();
    },
    onHidden: function onHidden() {
      this.translations.splice(0, this.translations.length);
    },
    startAdd: function startAdd() {
      this.modal.title = this.$t('add-new-translation');
      this.modal.isNew = true;
      this.modal.item = Object.assign({}, this.empty());
      this.modal.visible = true;
    },
    startEdit: function startEdit(item) {
      var idx = this.langs.findIndex(function (a) {
        return a.code === item.culture;
      });
      this.modal.title = this.$t('edit-translation', [this.langs[idx].name]);
      this.modal.isNew = false;
      this.modal.item = Object.assign({}, item);
      this.modal.visible = true;
    },
    save: function save() {
      var _this2 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {
        var item, args, tra, i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                item = _this2.modal.item;
                _context2.prev = 1;
                _this2.modal.saving = true;
                args = {
                  name: item.name,
                  title: item.title,
                  subtitle: item.subtitle,
                  thumbs: item.thumbArray
                };

                if (!_this2.modal.isNew) {
                  _context2.next = 13;
                  break;
                }

                // add
                args.categoryId = _this2.category.id;
                args.culture = item.culture;
                _context2.next = 9;
                return _this2.$api.post('/api/mag/Category/AddTranslation', args);

              case 9:
                tra = _context2.sent;

                _this2.translations.push(_this2.convert(tra));

                _context2.next = 18;
                break;

              case 13:
                // update
                args.id = item.id;
                _context2.next = 16;
                return _this2.$api.post('/api/mag/Category/UpdateTranslation', args);

              case 16:
                i = _this2.translations.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this2.$set(_this2.translations, i, item);
                }

              case 18:
                _this2.toastSuccess();

                _this2.modal.visible = false;
                _context2.next = 26;
                break;

              case 22:
                _context2.prev = 22;
                _context2.t0 = _context2["catch"](1);

                _this2.toastError(_context2.t0);

                console.error(_context2.t0);

              case 26:
                _context2.prev = 26;
                _this2.modal.saving = false;
                return _context2.finish(26);

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[1, 22, 26, 29]]);
      }))();
    },
    remove: function remove(item) {
      var _this3 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {
        var i;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this3.toastAsk();

              case 2:
                if (!_context3.sent) {
                  _context3.next = 19;
                  break;
                }

                _context3.prev = 3;
                item.removing = true;
                _context3.next = 7;
                return _this3.$api.post('/api/mag/Category/DeleteTranslation', {
                  id: item.id
                });

              case 7:
                _this3.toastSuccess();

                i = _this3.translations.findIndex(function (a) {
                  return a.id === item.id;
                });

                if (i > -1) {
                  _this3.translations.splice(i, 1);
                }

                _context3.next = 16;
                break;

              case 12:
                _context3.prev = 12;
                _context3.t0 = _context3["catch"](3);

                _this3.toastError(_context3.t0);

                console.error(_context3.t0);

              case 16:
                _context3.prev = 16;
                item.removing = false;
                return _context3.finish(16);

              case 19:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[3, 12, 16, 19]]);
      }))();
    },
    getCultureName: function getCultureName(culture) {
      if (this.isEmpty(culture)) {
        return 'Unknown';
      }

      var idx = this.langs.findIndex(function (a) {
        return a.code === culture;
      });
      return this.langs[idx].name;
    },
    getCultureDirection: function getCultureDirection(culture) {
      if (this.isEmpty(culture)) {
        return 'ltr';
      }

      var idx = this.langs.findIndex(function (a) {
        return a.code === culture;
      });
      return this.langs[idx].direction;
    },
    remainingCultures: function remainingCultures() {
      var _this4 = this;

      return this.cultures.filter(function (a) {
        var i = _this4.translations.findIndex(function (t) {
          return t.culture === a.value;
        });

        return i < 0;
      });
    }
  },
  computed: {
    title: function title() {
      var categoryName = this.getCategory().name;
      return this.$t('modal-title', [categoryName]);
    },
    canViewCategories: function canViewCategories() {
      return this.$user.hasAccess('mag_ViewCategories');
    },
    canEditCategory: function canEditCategory() {
      return this.$user.hasAccess('mag_UpdateCategory');
    },
    nameState: function nameState() {
      return !this.isEmpty(this.modal.item.name);
    },
    invalidName: function invalidName() {
      if (this.nameState) {
        return '';
      }

      return this.$t('name-required');
    },
    titleState: function titleState() {
      return !this.isEmpty(this.modal.item.title);
    },
    invalidTitle: function invalidTitle() {
      if (this.titleState) {
        return '';
      }

      return this.$t('title-required');
    },
    cultureState: function cultureState() {
      return !this.isEmpty(this.modal.item.culture);
    },
    invalidCulture: function invalidCulture() {
      if (this.cultureState) {
        return '';
      }

      return this.$t('culture-required');
    }
  },
  watch: {
    value: function value() {
      if (this.value === this.visible) {
        return;
      }

      this.visible = this.value;
    },
    visible: function visible() {
      var _this5 = this;

      return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4() {
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!_this5.visible) {
                  _context4.next = 5;
                  break;
                }

                _context4.next = 3;
                return _this5.onShown();

              case 3:
                _context4.next = 6;
                break;

              case 5:
                _this5.onHidden();

              case 6:
                if (!(_this5.value === _this5.visible)) {
                  _context4.next = 8;
                  break;
                }

                return _context4.abrupt("return");

              case 8:
                _this5.$emit('input', _this5.visible);

              case 9:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }))();
    }
  }
});

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/vue-i18n/dist/vue-i18n.esm.js":
/*!****************************************************!*\
  !*** ./node_modules/vue-i18n/dist/vue-i18n.esm.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
 * vue-i18n v8.21.0 
 * (c) 2020 kazuya kawaguchi
 * Released under the MIT License.
 */
/*  */

/**
 * constants
 */

var numberFormatKeys = [
  'style',
  'currency',
  'currencyDisplay',
  'useGrouping',
  'minimumIntegerDigits',
  'minimumFractionDigits',
  'maximumFractionDigits',
  'minimumSignificantDigits',
  'maximumSignificantDigits',
  'localeMatcher',
  'formatMatcher',
  'unit'
];

/**
 * utilities
 */

function warn (msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.warn(err.stack);
    }
  }
}

function error (msg, err) {
  if (typeof console !== 'undefined') {
    console.error('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.error(err.stack);
    }
  }
}

var isArray = Array.isArray;

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isBoolean (val) {
  return typeof val === 'boolean'
}

function isString (val) {
  return typeof val === 'string'
}

var toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return toString.call(obj) === OBJECT_STRING
}

function isNull (val) {
  return val === null || val === undefined
}

function isFunction (val) {
  return typeof val === 'function'
}

function parseArgs () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var locale = null;
  var params = null;
  if (args.length === 1) {
    if (isObject(args[0]) || isArray(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */
    if (isObject(args[1]) || isArray(args[1])) {
      params = args[1];
    }
  }

  return { locale: locale, params: params }
}

function looseClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

function includes (arr, item) {
  return !!~arr.indexOf(item)
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

function merge (target) {
  var arguments$1 = arguments;

  var output = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];
    if (source !== undefined && source !== null) {
      var key = (void 0);
      for (key in source) {
        if (hasOwn(source, key)) {
          if (isObject(source[key])) {
            output[key] = merge(output[key], source[key]);
          } else {
            output[key] = source[key];
          }
        }
      }
    }
  }
  return output
}

function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = isArray(a);
      var isArrayB = isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/*  */

function extend (Vue) {
  if (!Vue.prototype.hasOwnProperty('$i18n')) {
    // $FlowFixMe
    Object.defineProperty(Vue.prototype, '$i18n', {
      get: function get () { return this._i18n }
    });
  }

  Vue.prototype.$t = function (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this ].concat( values ))
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this, choice ].concat( values ))
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale)
  };

  Vue.prototype.$d = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).d.apply(ref, [ value ].concat( args ))
  };

  Vue.prototype.$n = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).n.apply(ref, [ value ].concat( args ))
  };
}

/*  */

var mixin = {
  beforeCreate: function beforeCreate () {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            var localeMessages = {};
            options.__i18n.forEach(function (resource) {
              localeMessages = merge(localeMessages, JSON.parse(resource));
            });
            Object.keys(localeMessages).forEach(function (locale) {
              options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);
            });
          } catch (e) {
            if (true) {
              error("Cannot parse locale messages via custom blocks.", e);
            }
          }
        }
        this._i18n = options.i18n;
        this._i18nWatcher = this._i18n.watchI18nData();
      } else if (isPlainObject(options.i18n)) {
        var rootI18n = this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n
          ? this.$root.$i18n
          : null;
        // component local i18n
        if (rootI18n) {
          options.i18n.root = this.$root;
          options.i18n.formatter = rootI18n.formatter;
          options.i18n.fallbackLocale = rootI18n.fallbackLocale;
          options.i18n.formatFallbackMessages = rootI18n.formatFallbackMessages;
          options.i18n.silentTranslationWarn = rootI18n.silentTranslationWarn;
          options.i18n.silentFallbackWarn = rootI18n.silentFallbackWarn;
          options.i18n.pluralizationRules = rootI18n.pluralizationRules;
          options.i18n.preserveDirectiveContent = rootI18n.preserveDirectiveContent;
        }

        // init locale messages via custom blocks
        if (options.__i18n) {
          try {
            var localeMessages$1 = {};
            options.__i18n.forEach(function (resource) {
              localeMessages$1 = merge(localeMessages$1, JSON.parse(resource));
            });
            options.i18n.messages = localeMessages$1;
          } catch (e) {
            if (true) {
              warn("Cannot parse locale messages via custom blocks.", e);
            }
          }
        }

        var ref = options.i18n;
        var sharedMessages = ref.sharedMessages;
        if (sharedMessages && isPlainObject(sharedMessages)) {
          options.i18n.messages = merge(options.i18n.messages, sharedMessages);
        }

        this._i18n = new VueI18n(options.i18n);
        this._i18nWatcher = this._i18n.watchI18nData();

        if (options.i18n.sync === undefined || !!options.i18n.sync) {
          this._localeWatcher = this.$i18n.watchLocale();
        }

        if (rootI18n) {
          rootI18n.onComponentInstanceCreated(this._i18n);
        }
      } else {
        if (true) {
          warn("Cannot be interpreted 'i18n' option.");
        }
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      // root i18n
      this._i18n = this.$root.$i18n;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      // parent i18n
      this._i18n = options.parent.$i18n;
    }
  },

  beforeMount: function beforeMount () {
    var options = this.$options;
    options.i18n = options.i18n || (options.__i18n ? {} : null);

    if (options.i18n) {
      if (options.i18n instanceof VueI18n) {
        // init locale messages via custom blocks
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else if (isPlainObject(options.i18n)) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else {
        if (true) {
          warn("Cannot be interpreted 'i18n' option.");
        }
      }
    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);
      this._subscribing = true;
    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
      this._i18n.subscribeDataChanging(this);
      this._subscribing = true;
    }
  },

  beforeDestroy: function beforeDestroy () {
    if (!this._i18n) { return }

    var self = this;
    this.$nextTick(function () {
      if (self._subscribing) {
        self._i18n.unsubscribeDataChanging(self);
        delete self._subscribing;
      }

      if (self._i18nWatcher) {
        self._i18nWatcher();
        self._i18n.destroyVM();
        delete self._i18nWatcher;
      }

      if (self._localeWatcher) {
        self._localeWatcher();
        delete self._localeWatcher;
      }
    });
  }
};

/*  */

var interpolationComponent = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    },
    places: {
      type: [Array, Object]
    }
  },
  render: function render (h, ref) {
    var data = ref.data;
    var parent = ref.parent;
    var props = ref.props;
    var slots = ref.slots;

    var $i18n = parent.$i18n;
    if (!$i18n) {
      if (true) {
        warn('Cannot find VueI18n instance!');
      }
      return
    }

    var path = props.path;
    var locale = props.locale;
    var places = props.places;
    var params = slots();
    var children = $i18n.i(
      path,
      locale,
      onlyHasDefaultPlace(params) || places
        ? useLegacyPlaces(params.default, places)
        : params
    );

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, data, children) : children
  }
};

function onlyHasDefaultPlace (params) {
  var prop;
  for (prop in params) {
    if (prop !== 'default') { return false }
  }
  return Boolean(prop)
}

function useLegacyPlaces (children, places) {
  var params = places ? createParamsFromPlaces(places) : {};

  if (!children) { return params }

  // Filter empty text nodes
  children = children.filter(function (child) {
    return child.tag || child.text.trim() !== ''
  });

  var everyPlace = children.every(vnodeHasPlaceAttribute);
  if ( true && everyPlace) {
    warn('`place` attribute is deprecated in next major version. Please switch to Vue slots.');
  }

  return children.reduce(
    everyPlace ? assignChildPlace : assignChildIndex,
    params
  )
}

function createParamsFromPlaces (places) {
  if (true) {
    warn('`places` prop is deprecated in next major version. Please switch to Vue slots.');
  }

  return Array.isArray(places)
    ? places.reduce(assignChildIndex, {})
    : Object.assign({}, places)
}

function assignChildPlace (params, child) {
  if (child.data && child.data.attrs && child.data.attrs.place) {
    params[child.data.attrs.place] = child;
  }
  return params
}

function assignChildIndex (params, child, index) {
  params[index] = child;
  return params
}

function vnodeHasPlaceAttribute (vnode) {
  return Boolean(vnode.data && vnode.data.attrs && vnode.data.attrs.place)
}

/*  */

var numberComponent = {
  name: 'i18n-n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    },
    locale: {
      type: String
    }
  },
  render: function render (h, ref) {
    var props = ref.props;
    var parent = ref.parent;
    var data = ref.data;

    var i18n = parent.$i18n;

    if (!i18n) {
      if (true) {
        warn('Cannot find VueI18n instance!');
      }
      return null
    }

    var key = null;
    var options = null;

    if (isString(props.format)) {
      key = props.format;
    } else if (isObject(props.format)) {
      if (props.format.key) {
        key = props.format.key;
      }

      // Filter out number format options only
      options = Object.keys(props.format).reduce(function (acc, prop) {
        var obj;

        if (includes(numberFormatKeys, prop)) {
          return Object.assign({}, acc, ( obj = {}, obj[prop] = props.format[prop], obj ))
        }
        return acc
      }, null);
    }

    var locale = props.locale || i18n.locale;
    var parts = i18n._ntp(props.value, locale, key, options);

    var values = parts.map(function (part, index) {
      var obj;

      var slot = data.scopedSlots && data.scopedSlots[part.type];
      return slot ? slot(( obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj )) : part.value
    });

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag
      ? h(tag, {
        attrs: data.attrs,
        'class': data['class'],
        staticClass: data.staticClass
      }, values)
      : values
  }
};

/*  */

function bind (el, binding, vnode) {
  if (!assert(el, vnode)) { return }

  t(el, binding, vnode);
}

function update (el, binding, vnode, oldVNode) {
  if (!assert(el, vnode)) { return }

  var i18n = vnode.context.$i18n;
  if (localeEqual(el, vnode) &&
    (looseEqual(binding.value, binding.oldValue) &&
     looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale)))) { return }

  t(el, binding, vnode);
}

function unbind (el, binding, vnode, oldVNode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return
  }

  var i18n = vnode.context.$i18n || {};
  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {
    el.textContent = '';
  }
  el._vt = undefined;
  delete el['_vt'];
  el._locale = undefined;
  delete el['_locale'];
  el._localeMessage = undefined;
  delete el['_localeMessage'];
}

function assert (el, vnode) {
  var vm = vnode.context;
  if (!vm) {
    warn('Vue instance does not exists in VNode context');
    return false
  }

  if (!vm.$i18n) {
    warn('VueI18n instance does not exists in Vue instance');
    return false
  }

  return true
}

function localeEqual (el, vnode) {
  var vm = vnode.context;
  return el._locale === vm.$i18n.locale
}

function t (el, binding, vnode) {
  var ref$1, ref$2;

  var value = binding.value;

  var ref = parseValue(value);
  var path = ref.path;
  var locale = ref.locale;
  var args = ref.args;
  var choice = ref.choice;
  if (!path && !locale && !args) {
    warn('value type not supported');
    return
  }

  if (!path) {
    warn('`path` is required in v-t directive');
    return
  }

  var vm = vnode.context;
  if (choice != null) {
    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [ path, choice ].concat( makeParams(locale, args) ));
  } else {
    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [ path ].concat( makeParams(locale, args) ));
  }
  el._locale = vm.$i18n.locale;
  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);
}

function parseValue (value) {
  var path;
  var locale;
  var args;
  var choice;

  if (isString(value)) {
    path = value;
  } else if (isPlainObject(value)) {
    path = value.path;
    locale = value.locale;
    args = value.args;
    choice = value.choice;
  }

  return { path: path, locale: locale, args: args, choice: choice }
}

function makeParams (locale, args) {
  var params = [];

  locale && params.push(locale);
  if (args && (Array.isArray(args) || isPlainObject(args))) {
    params.push(args);
  }

  return params
}

var Vue;

function install (_Vue) {
  /* istanbul ignore if */
  if ( true && install.installed && _Vue === Vue) {
    warn('already installed.');
    return
  }
  install.installed = true;

  Vue = _Vue;

  var version = (Vue.version && Number(Vue.version.split('.')[0])) || -1;
  /* istanbul ignore if */
  if ( true && version < 2) {
    warn(("vue-i18n (" + (install.version) + ") need to use Vue 2.0 or later (Vue: " + (Vue.version) + ")."));
    return
  }

  extend(Vue);
  Vue.mixin(mixin);
  Vue.directive('t', { bind: bind, update: update, unbind: unbind });
  Vue.component(interpolationComponent.name, interpolationComponent);
  Vue.component(numberComponent.name, numberComponent);

  // use simple mergeStrategies to prevent i18n instance lose '__proto__'
  var strats = Vue.config.optionMergeStrategies;
  strats.i18n = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };
}

/*  */

var BaseFormatter = function BaseFormatter () {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate (message, values) {
  if (!values) {
    return [message]
  }
  var tokens = this._caches[message];
  if (!tokens) {
    tokens = parse(message);
    this._caches[message] = tokens;
  }
  return compile(tokens, values)
};



var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;

function parse (format) {
  var tokens = [];
  var position = 0;

  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === '{') {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }

      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== '}') {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === '}';

      var type = RE_TOKEN_LIST_VALUE.test(sub)
        ? 'list'
        : isClosed && RE_TOKEN_NAMED_VALUE.test(sub)
          ? 'named'
          : 'unknown';
      tokens.push({ value: sub, type: type });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
      if (format[(position)] !== '{') {
        text += char;
      }
    } else {
      text += char;
    }
  }

  text && tokens.push({ type: 'text', value: text });

  return tokens
}

function compile (tokens, values) {
  var compiled = [];
  var index = 0;

  var mode = Array.isArray(values)
    ? 'list'
    : isObject(values)
      ? 'named'
      : 'unknown';
  if (mode === 'unknown') { return compiled }

  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break
      case 'named':
        if (mode === 'named') {
          compiled.push((values)[token.value]);
        } else {
          if (true) {
            warn(("Type of token '" + (token.type) + "' and format of value '" + mode + "' don't match!"));
          }
        }
        break
      case 'unknown':
        if (true) {
          warn("Detect 'unknown' type of token!");
        }
        break
    }
    index++;
  }

  return compiled
}

/*  */

/**
 *  Path parser
 *  - Inspired:
 *    Vue.js Path parser
 */

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral (exp) {
  return literalValueRE.test(exp)
}

/**
 * Strip quotes from a string
 */

function stripQuotes (str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27)
    ? str.slice(1, -1)
    : str
}

/**
 * Determine the type of a character in a keypath.
 */

function getPathCharType (ch) {
  if (ch === undefined || ch === null) { return 'eof' }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
      return ch

    case 0x5F: // _
    case 0x24: // $
    case 0x2D: // -
      return 'ident'

    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0:  // No-break space
    case 0xFEFF:  // Byte Order Mark
    case 0x2028:  // Line Separator
    case 0x2029:  // Paragraph Separator
      return 'ws'
  }

  return 'ident'
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */

function formatSubPath (path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) { return false }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed
}

/**
 * Parse a string path into an array of segments
 */

function parse$1 (path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      if (key === undefined) { return false }
      key = formatSubPath(key);
      if (key === false) {
        return false
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote () {
    var nextChar = path[index + 1];
    if ((mode === IN_SINGLE_QUOTE && nextChar === "'") ||
      (mode === IN_DOUBLE_QUOTE && nextChar === '"')) {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined
        ? c
        : newChar;
      if (action() === false) {
        return
      }
    }

    if (mode === AFTER_PATH) {
      return keys
    }
  }
}





var I18nPath = function I18nPath () {
  this._cache = Object.create(null);
};

/**
 * External parse that check for a cache hit first
 */
I18nPath.prototype.parsePath = function parsePath (path) {
  var hit = this._cache[path];
  if (!hit) {
    hit = parse$1(path);
    if (hit) {
      this._cache[path] = hit;
    }
  }
  return hit || []
};

/**
 * Get path value from path string
 */
I18nPath.prototype.getPathValue = function getPathValue (obj, path) {
  if (!isObject(obj)) { return null }

  var paths = this.parsePath(path);
  if (paths.length === 0) {
    return null
  } else {
    var length = paths.length;
    var last = obj;
    var i = 0;
    while (i < length) {
      var value = last[paths[i]];
      if (value === undefined) {
        return null
      }
      last = value;
      i++;
    }

    return last
  }
};

/*  */



var htmlTagMatcher = /<\/?[\w\s="/.':;#-\/]+>/;
var linkKeyMatcher = /(?:@(?:\.[a-z]+)?:(?:[\w\-_|.]+|\([\w\-_|.]+\)))/g;
var linkKeyPrefixMatcher = /^@(?:\.([a-z]+))?:/;
var bracketsMatcher = /[()]/g;
var defaultModifiers = {
  'upper': function (str) { return str.toLocaleUpperCase(); },
  'lower': function (str) { return str.toLocaleLowerCase(); },
  'capitalize': function (str) { return ("" + (str.charAt(0).toLocaleUpperCase()) + (str.substr(1))); }
};

var defaultFormatter = new BaseFormatter();

var VueI18n = function VueI18n (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #290
  /* istanbul ignore if */
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale === false
    ? false
    : options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || {};
  var numberFormats = options.numberFormats || {};

  this._vm = null;
  this._formatter = options.formatter || defaultFormatter;
  this._modifiers = options.modifiers || {};
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined
    ? true
    : !!options.fallbackRoot;
  this._formatFallbackMessages = options.formatFallbackMessages === undefined
    ? false
    : !!options.formatFallbackMessages;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined
    ? false
    : options.silentTranslationWarn;
  this._silentFallbackWarn = options.silentFallbackWarn === undefined
    ? false
    : !!options.silentFallbackWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();
  this._dataListeners = [];
  this._componentInstanceCreatedListener = options.componentInstanceCreatedListener || null;
  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined
    ? false
    : !!options.preserveDirectiveContent;
  this.pluralizationRules = options.pluralizationRules || {};
  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';
  this._postTranslation = options.postTranslation || null;

  /**
   * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`
   * @param choicesLength {number} an overall amount of available choices
   * @returns a final choice index
  */
  this.getChoiceIndex = function (choice, choicesLength) {
    var thisPrototype = Object.getPrototypeOf(this$1);
    if (thisPrototype && thisPrototype.getChoiceIndex) {
      var prototypeGetChoiceIndex = (thisPrototype.getChoiceIndex);
      return (prototypeGetChoiceIndex).call(this$1, choice, choicesLength)
    }

    // Default (old) getChoiceIndex implementation - english-compatible
    var defaultImpl = function (_choice, _choicesLength) {
      _choice = Math.abs(_choice);

      if (_choicesLength === 2) {
        return _choice
          ? _choice > 1
            ? 1
            : 0
          : 1
      }

      return _choice ? Math.min(_choice, 2) : 0
    };

    if (this$1.locale in this$1.pluralizationRules) {
      return this$1.pluralizationRules[this$1.locale].apply(this$1, [choice, choicesLength])
    } else {
      return defaultImpl(choice, choicesLength)
    }
  };


  this._exist = function (message, key) {
    if (!message || !key) { return false }
    if (!isNull(this$1._path.getPathValue(message, key))) { return true }
    // fallback for flat key
    if (message[key]) { return true }
    return false
  };

  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var prototypeAccessors = { vm: { configurable: true },messages: { configurable: true },dateTimeFormats: { configurable: true },numberFormats: { configurable: true },availableLocales: { configurable: true },locale: { configurable: true },fallbackLocale: { configurable: true },formatFallbackMessages: { configurable: true },missing: { configurable: true },formatter: { configurable: true },silentTranslationWarn: { configurable: true },silentFallbackWarn: { configurable: true },preserveDirectiveContent: { configurable: true },warnHtmlInMessage: { configurable: true },postTranslation: { configurable: true } };

VueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage (locale, level, message) {
  var paths = [];

  var fn = function (level, locale, message, paths) {
    if (isPlainObject(message)) {
      Object.keys(message).forEach(function (key) {
        var val = message[key];
        if (isPlainObject(val)) {
          paths.push(key);
          paths.push('.');
          fn(level, locale, val, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(key);
          fn(level, locale, val, paths);
          paths.pop();
        }
      });
    } else if (isArray(message)) {
      message.forEach(function (item, index) {
        if (isPlainObject(item)) {
          paths.push(("[" + index + "]"));
          paths.push('.');
          fn(level, locale, item, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(("[" + index + "]"));
          fn(level, locale, item, paths);
          paths.pop();
        }
      });
    } else if (isString(message)) {
      var ret = htmlTagMatcher.test(message);
      if (ret) {
        var msg = "Detected HTML in message '" + message + "' of keypath '" + (paths.join('')) + "' at '" + locale + "'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";
        if (level === 'warn') {
          warn(msg);
        } else if (level === 'error') {
          error(msg);
        }
      }
    }
  };

  fn(level, locale, message, paths);
};

VueI18n.prototype._initVM = function _initVM (data) {
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  this._vm = new Vue({ data: data });
  Vue.config.silent = silent;
};

VueI18n.prototype.destroyVM = function destroyVM () {
  this._vm.$destroy();
};

VueI18n.prototype.subscribeDataChanging = function subscribeDataChanging (vm) {
  this._dataListeners.push(vm);
};

VueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging (vm) {
  remove(this._dataListeners, vm);
};

VueI18n.prototype.watchI18nData = function watchI18nData () {
  var self = this;
  return this._vm.$watch('$data', function () {
    var i = self._dataListeners.length;
    while (i--) {
      Vue.nextTick(function () {
        self._dataListeners[i] && self._dataListeners[i].$forceUpdate();
      });
    }
  }, { deep: true })
};

VueI18n.prototype.watchLocale = function watchLocale () {
  /* istanbul ignore if */
  if (!this._sync || !this._root) { return null }
  var target = this._vm;
  return this._root.$i18n.vm.$watch('locale', function (val) {
    target.$set(target, 'locale', val);
    target.$forceUpdate();
  }, { immediate: true })
};

VueI18n.prototype.onComponentInstanceCreated = function onComponentInstanceCreated (newI18n) {
  if (this._componentInstanceCreatedListener) {
    this._componentInstanceCreatedListener(newI18n, this);
  }
};

prototypeAccessors.vm.get = function () { return this._vm };

prototypeAccessors.messages.get = function () { return looseClone(this._getMessages()) };
prototypeAccessors.dateTimeFormats.get = function () { return looseClone(this._getDateTimeFormats()) };
prototypeAccessors.numberFormats.get = function () { return looseClone(this._getNumberFormats()) };
prototypeAccessors.availableLocales.get = function () { return Object.keys(this.messages).sort() };

prototypeAccessors.locale.get = function () { return this._vm.locale };
prototypeAccessors.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

prototypeAccessors.fallbackLocale.get = function () { return this._vm.fallbackLocale };
prototypeAccessors.fallbackLocale.set = function (locale) {
  this._localeChainCache = {};
  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

prototypeAccessors.formatFallbackMessages.get = function () { return this._formatFallbackMessages };
prototypeAccessors.formatFallbackMessages.set = function (fallback) { this._formatFallbackMessages = fallback; };

prototypeAccessors.missing.get = function () { return this._missing };
prototypeAccessors.missing.set = function (handler) { this._missing = handler; };

prototypeAccessors.formatter.get = function () { return this._formatter };
prototypeAccessors.formatter.set = function (formatter) { this._formatter = formatter; };

prototypeAccessors.silentTranslationWarn.get = function () { return this._silentTranslationWarn };
prototypeAccessors.silentTranslationWarn.set = function (silent) { this._silentTranslationWarn = silent; };

prototypeAccessors.silentFallbackWarn.get = function () { return this._silentFallbackWarn };
prototypeAccessors.silentFallbackWarn.set = function (silent) { this._silentFallbackWarn = silent; };

prototypeAccessors.preserveDirectiveContent.get = function () { return this._preserveDirectiveContent };
prototypeAccessors.preserveDirectiveContent.set = function (preserve) { this._preserveDirectiveContent = preserve; };

prototypeAccessors.warnHtmlInMessage.get = function () { return this._warnHtmlInMessage };
prototypeAccessors.warnHtmlInMessage.set = function (level) {
    var this$1 = this;

  var orgLevel = this._warnHtmlInMessage;
  this._warnHtmlInMessage = level;
  if (orgLevel !== level && (level === 'warn' || level === 'error')) {
    var messages = this._getMessages();
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }
};

prototypeAccessors.postTranslation.get = function () { return this._postTranslation };
prototypeAccessors.postTranslation.set = function (handler) { this._postTranslation = handler; };

VueI18n.prototype._getMessages = function _getMessages () { return this._vm.messages };
VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats () { return this._vm.dateTimeFormats };
VueI18n.prototype._getNumberFormats = function _getNumberFormats () { return this._vm.numberFormats };

VueI18n.prototype._warnDefault = function _warnDefault (locale, key, result, vm, values, interpolateMode) {
  if (!isNull(result)) { return result }
  if (this._missing) {
    var missingRet = this._missing.apply(null, [locale, key, vm, values]);
    if (isString(missingRet)) {
      return missingRet
    }
  } else {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn(
        "Cannot translate the value of keypath '" + key + "'. " +
        'Use the value of keypath as default.'
      );
    }
  }

  if (this._formatFallbackMessages) {
    var parsedArgs = parseArgs.apply(void 0, values);
    return this._render(key, interpolateMode, parsedArgs.params, key)
  } else {
    return key
  }
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot (val) {
  return !val && !isNull(this._root) && this._fallbackRoot
};

VueI18n.prototype._isSilentFallbackWarn = function _isSilentFallbackWarn (key) {
  return this._silentFallbackWarn instanceof RegExp
    ? this._silentFallbackWarn.test(key)
    : this._silentFallbackWarn
};

VueI18n.prototype._isSilentFallback = function _isSilentFallback (locale, key) {
  return this._isSilentFallbackWarn(key) && (this._isFallbackRoot() || locale !== this.fallbackLocale)
};

VueI18n.prototype._isSilentTranslationWarn = function _isSilentTranslationWarn (key) {
  return this._silentTranslationWarn instanceof RegExp
    ? this._silentTranslationWarn.test(key)
    : this._silentTranslationWarn
};

VueI18n.prototype._interpolate = function _interpolate (
  locale,
  message,
  key,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  if (!message) { return null }

  var pathRet = this._path.getPathValue(message, key);
  if (isArray(pathRet) || isPlainObject(pathRet)) { return pathRet }

  var ret;
  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject(message)) {
      ret = message[key];
      if (!(isString(ret) || isFunction(ret))) {
        if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallback(locale, key)) {
          warn(("Value of key '" + key + "' is not a string or function !"));
        }
        return null
      }
    } else {
      return null
    }
  } else {
    /* istanbul ignore else */
    if (isString(pathRet) || isFunction(pathRet)) {
      ret = pathRet;
    } else {
      if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallback(locale, key)) {
        warn(("Value of key '" + key + "' is not a string or function!"));
      }
      return null
    }
  }

  // Check for the existence of links within the translated string
  if (isString(ret) && (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0)) {
    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);
  }

  return this._render(ret, interpolateMode, values, key)
};

VueI18n.prototype._link = function _link (
  locale,
  message,
  str,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  var ret = str;

  // Match all the links within the local
  // We are going to replace each of
  // them with its translation
  var matches = ret.match(linkKeyMatcher);
  for (var idx in matches) {
    // ie compatible: filter custom array
    // prototype method
    if (!matches.hasOwnProperty(idx)) {
      continue
    }
    var link = matches[idx];
    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);
    var linkPrefix = linkKeyPrefixMatches[0];
      var formatterName = linkKeyPrefixMatches[1];

    // Remove the leading @:, @.case: and the brackets
    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');

    if (includes(visitedLinkStack, linkPlaceholder)) {
      if (true) {
        warn(("Circular reference found. \"" + link + "\" is already visited in the chain of " + (visitedLinkStack.reverse().join(' <- '))));
      }
      return ret
    }
    visitedLinkStack.push(linkPlaceholder);

    // Translate the link
    var translated = this._interpolate(
      locale, message, linkPlaceholder, host,
      interpolateMode === 'raw' ? 'string' : interpolateMode,
      interpolateMode === 'raw' ? undefined : values,
      visitedLinkStack
    );

    if (this._isFallbackRoot(translated)) {
      if ( true && !this._isSilentTranslationWarn(linkPlaceholder)) {
        warn(("Fall back to translate the link placeholder '" + linkPlaceholder + "' with root locale."));
      }
      /* istanbul ignore if */
      if (!this._root) { throw Error('unexpected error') }
      var root = this._root.$i18n;
      translated = root._translate(
        root._getMessages(), root.locale, root.fallbackLocale,
        linkPlaceholder, host, interpolateMode, values
      );
    }
    translated = this._warnDefault(
      locale, linkPlaceholder, translated, host,
      isArray(values) ? values : [values],
      interpolateMode
    );

    if (this._modifiers.hasOwnProperty(formatterName)) {
      translated = this._modifiers[formatterName](translated);
    } else if (defaultModifiers.hasOwnProperty(formatterName)) {
      translated = defaultModifiers[formatterName](translated);
    }

    visitedLinkStack.pop();

    // Replace the link with the translated
    ret = !translated ? ret : ret.replace(link, translated);
  }

  return ret
};

VueI18n.prototype._createMessageContext = function _createMessageContext (values) {
  var _list = isArray(values) ? values : [];
  var _named = isObject(values) ? values : {};
  var list = function (index) { return _list[index]; };
  var named = function (key) { return _named[key]; };
  return {
    list: list,
    named: named
  }
};

VueI18n.prototype._render = function _render (message, interpolateMode, values, path) {
  if (isFunction(message)) {
    return message(this._createMessageContext(values))
  }

  var ret = this._formatter.interpolate(message, values, path);

  // If the custom formatter refuses to work - apply the default one
  if (!ret) {
    ret = defaultFormatter.interpolate(message, values, path);
  }

  // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter
  return interpolateMode === 'string' && !isString(ret) ? ret.join('') : ret
};

VueI18n.prototype._appendItemToChain = function _appendItemToChain (chain, item, blocks) {
  var follow = false;
  if (!includes(chain, item)) {
    follow = true;
    if (item) {
      follow = item[item.length - 1] !== '!';
      item = item.replace(/!/g, '');
      chain.push(item);
      if (blocks && blocks[item]) {
        follow = blocks[item];
      }
    }
  }
  return follow
};

VueI18n.prototype._appendLocaleToChain = function _appendLocaleToChain (chain, locale, blocks) {
  var follow;
  var tokens = locale.split('-');
  do {
    var item = tokens.join('-');
    follow = this._appendItemToChain(chain, item, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && (follow === true))
  return follow
};

VueI18n.prototype._appendBlockToChain = function _appendBlockToChain (chain, block, blocks) {
  var follow = true;
  for (var i = 0; (i < block.length) && (isBoolean(follow)); i++) {
    var locale = block[i];
    if (isString(locale)) {
      follow = this._appendLocaleToChain(chain, locale, blocks);
    }
  }
  return follow
};

VueI18n.prototype._getLocaleChain = function _getLocaleChain (start, fallbackLocale) {
  if (start === '') { return [] }

  if (!this._localeChainCache) {
    this._localeChainCache = {};
  }

  var chain = this._localeChainCache[start];
  if (!chain) {
    if (!fallbackLocale) {
      fallbackLocale = this.fallbackLocale;
    }
    chain = [];

    // first block defined by start
    var block = [start];

    // while any intervening block found
    while (isArray(block)) {
      block = this._appendBlockToChain(
        chain,
        block,
        fallbackLocale
      );
    }

    // last block defined by default
    var defaults;
    if (isArray(fallbackLocale)) {
      defaults = fallbackLocale;
    } else if (isObject(fallbackLocale)) {
      /* $FlowFixMe */
      if (fallbackLocale['default']) {
        defaults = fallbackLocale['default'];
      } else {
        defaults = null;
      }
    } else {
      defaults = fallbackLocale;
    }

    // convert defaults to array
    if (isString(defaults)) {
      block = [defaults];
    } else {
      block = defaults;
    }
    if (block) {
      this._appendBlockToChain(
        chain,
        block,
        null
      );
    }
    this._localeChainCache[start] = chain;
  }
  return chain
};

VueI18n.prototype._translate = function _translate (
  messages,
  locale,
  fallback,
  key,
  host,
  interpolateMode,
  args
) {
  var chain = this._getLocaleChain(locale, fallback);
  var res;
  for (var i = 0; i < chain.length; i++) {
    var step = chain[i];
    res =
      this._interpolate(step, messages[step], key, host, interpolateMode, args, [key]);
    if (!isNull(res)) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to translate the keypath '" + key + "' with '" + step + "' locale."));
      }
      return res
    }
  }
  return null
};

VueI18n.prototype._t = function _t (key, _locale, messages, host) {
    var ref;

    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];
  if (!key) { return '' }

  var parsedArgs = parseArgs.apply(void 0, values);
  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(
    messages, locale, this.fallbackLocale, key,
    host, 'string', parsedArgs.params
  );
  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn(("Fall back to translate the keypath '" + key + "' with root locale."));
    }
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).$t.apply(ref, [ key ].concat( values ))
  } else {
    ret = this._warnDefault(locale, key, ret, host, values, 'string');
    if (this._postTranslation && ret !== null && ret !== undefined) {
      ret = this._postTranslation(ret, key);
    }
    return ret
  }
};

VueI18n.prototype.t = function t (key) {
    var ref;

    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];
  return (ref = this)._t.apply(ref, [ key, this.locale, this._getMessages(), null ].concat( values ))
};

VueI18n.prototype._i = function _i (key, locale, messages, host, values) {
  var ret =
    this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);
  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn(("Fall back to interpolate the keypath '" + key + "' with root locale."));
    }
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.i(key, locale, values)
  } else {
    return this._warnDefault(locale, key, ret, host, [values], 'raw')
  }
};

VueI18n.prototype.i = function i (key, locale, values) {
  /* istanbul ignore if */
  if (!key) { return '' }

  if (!isString(locale)) {
    locale = this.locale;
  }

  return this._i(key, locale, this._getMessages(), null, values)
};

VueI18n.prototype._tc = function _tc (
  key,
  _locale,
  messages,
  host,
  choice
) {
    var ref;

    var values = [], len = arguments.length - 5;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 5 ];
  if (!key) { return '' }
  if (choice === undefined) {
    choice = 1;
  }

  var predefined = { 'count': choice, 'n': choice };
  var parsedArgs = parseArgs.apply(void 0, values);
  parsedArgs.params = Object.assign(predefined, parsedArgs.params);
  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];
  return this.fetchChoice((ref = this)._t.apply(ref, [ key, _locale, messages, host ].concat( values )), choice)
};

VueI18n.prototype.fetchChoice = function fetchChoice (message, choice) {
  /* istanbul ignore if */
  if (!message && !isString(message)) { return null }
  var choices = message.split('|');

  choice = this.getChoiceIndex(choice, choices.length);
  if (!choices[choice]) { return message }
  return choices[choice].trim()
};

VueI18n.prototype.tc = function tc (key, choice) {
    var ref;

    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];
  return (ref = this)._tc.apply(ref, [ key, this.locale, this._getMessages(), null, choice ].concat( values ))
};

VueI18n.prototype._te = function _te (key, locale, messages) {
    var args = [], len = arguments.length - 3;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

  var _locale = parseArgs.apply(void 0, args).locale || locale;
  return this._exist(messages[_locale], key)
};

VueI18n.prototype.te = function te (key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale)
};

VueI18n.prototype.getLocaleMessage = function getLocaleMessage (locale) {
  return looseClone(this._vm.messages[locale] || {})
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, message);
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, merge({}, this._vm.messages[locale] || {}, message));
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat (locale) {
  return looseClone(this._vm.dateTimeFormats[locale] || {})
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, format);
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, merge(this._vm.dateTimeFormats[locale] || {}, format));
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype._clearDateTimeFormat = function _clearDateTimeFormat (locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._dateTimeFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._dateTimeFormatters[id];
  }
};

VueI18n.prototype._localizeDateTime = function _localizeDateTime (
  value,
  locale,
  fallback,
  dateTimeFormats,
  key
) {
  var _locale = locale;
  var formats = dateTimeFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = dateTimeFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' datetime formats from '" + current + "' datetime formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];
    var id = _locale + "__" + key;
    var formatter = this._dateTimeFormatters[id];
    if (!formatter) {
      formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);
    }
    return formatter.format(value)
  }
};

VueI18n.prototype._d = function _d (value, locale, key) {
  /* istanbul ignore if */
  if ( true && !VueI18n.availabilities.dateTimeFormat) {
    warn('Cannot format a Date value due to not supported Intl.DateTimeFormat.');
    return ''
  }

  if (!key) {
    return new Intl.DateTimeFormat(locale).format(value)
  }

  var ret =
    this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key);
  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn(("Fall back to datetime localization of root: key '" + key + "'."));
    }
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.d(value, key, locale)
  } else {
    return ret || ''
  }
};

VueI18n.prototype.d = function d (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._d(value, locale, key)
};

VueI18n.prototype.getNumberFormat = function getNumberFormat (locale) {
  return looseClone(this._vm.numberFormats[locale] || {})
};

VueI18n.prototype.setNumberFormat = function setNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, format);
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, merge(this._vm.numberFormats[locale] || {}, format));
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype._clearNumberFormat = function _clearNumberFormat (locale, format) {
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._numberFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._numberFormatters[id];
  }
};

VueI18n.prototype._getNumberFormatter = function _getNumberFormatter (
  value,
  locale,
  fallback,
  numberFormats,
  key,
  options
) {
  var _locale = locale;
  var formats = numberFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = numberFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "development" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        warn(("Fall back to '" + step + "' number formats from '" + current + "' number formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];

    var formatter;
    if (options) {
      // If options specified - create one time number formatter
      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._numberFormatters[id];
      if (!formatter) {
        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);
      }
    }
    return formatter
  }
};

VueI18n.prototype._n = function _n (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (true) {
      warn('Cannot format a Number value due to not supported Intl.NumberFormat.');
    }
    return ''
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.format(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.format(value);
  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
      warn(("Fall back to number localization of root: key '" + key + "'."));
    }
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.n(value, Object.assign({}, { key: key, locale: locale }, options))
  } else {
    return ret || ''
  }
};

VueI18n.prototype.n = function n (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }

      // Filter out number format options only
      options = Object.keys(args[0]).reduce(function (acc, key) {
          var obj;

        if (includes(numberFormatKeys, key)) {
          return Object.assign({}, acc, ( obj = {}, obj[key] = args[0][key], obj ))
        }
        return acc
      }, null);
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._n(value, locale, key, options)
};

VueI18n.prototype._ntp = function _ntp (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (true) {
      warn('Cannot format to parts a Number value due to not supported Intl.NumberFormat.');
    }
    return []
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.formatToParts(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.formatToParts(value);
  if (this._isFallbackRoot(ret)) {
    if ( true && !this._isSilentTranslationWarn(key)) {
      warn(("Fall back to format number to parts of root: key '" + key + "' ."));
    }
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n._ntp(value, locale, key, options)
  } else {
    return ret || []
  }
};

Object.defineProperties( VueI18n.prototype, prototypeAccessors );

var availabilities;
// $FlowFixMe
Object.defineProperty(VueI18n, 'availabilities', {
  get: function get () {
    if (!availabilities) {
      var intlDefined = typeof Intl !== 'undefined';
      availabilities = {
        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',
        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'
      };
    }

    return availabilities
  }
});

VueI18n.install = install;
VueI18n.version = '8.21.0';

/* harmony default export */ __webpack_exports__["default"] = (VueI18n);


/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/mag/WPosts.vue?vue&type=template&id=417637f0&":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/mag/WPosts.vue?vue&type=template&id=417637f0& ***!
  \****************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "span",
    [
      _c(
        "b-modal",
        {
          attrs: {
            "no-close-on-esc": "",
            "no-close-on-backdrop": "",
            "hide-footer": "",
            size: "xl",
            title: _vm.title
          },
          model: {
            value: _vm.visible,
            callback: function($$v) {
              _vm.visible = $$v
            },
            expression: "visible"
          }
        },
        [
          _c(
            "w-data-table-server",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.canView,
                  expression: "canView"
                }
              ],
              ref: "table",
              attrs: { cols: _vm.postCols },
              on: { "data-provider": _vm.loadPosts },
              scopedSlots: _vm._u([
                {
                  key: "id",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c("span", {}, [_vm._v(_vm._s(value))])
                  }
                },
                {
                  key: "name",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c("span", {}, [_vm._v(_vm._s(value))])
                  }
                },
                {
                  key: "publishFrom",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c("span", {}, [_vm._v(_vm._s(value))])
                  }
                },
                {
                  key: "publishUntilMs",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c("span", {}, [
                      _vm._v(
                        _vm._s(
                          row.hasPublishUntil
                            ? _vm.dateHelper.formatUnixMs(value)
                            : ""
                        )
                      )
                    ])
                  }
                },
                {
                  key: "author",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c(
                      "span",
                      {},
                      [
                        _c("span", { attrs: { id: "author_" + row.id } }, [
                          _vm._v(_vm._s(row.authorName))
                        ]),
                        _vm._v(" "),
                        _c(
                          "b-tooltip",
                          { attrs: { target: "author_" + row.id } },
                          [
                            _vm._v(
                              _vm._s(row.authorUserName) +
                                " - " +
                                _vm._s(row.authorEmail) +
                                " - " +
                                _vm._s(row.authorPhoneNumber)
                            )
                          ]
                        )
                      ],
                      1
                    )
                  }
                },
                {
                  key: "lastEditor",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c(
                      "span",
                      {},
                      [
                        _c("span", { attrs: { id: "lastEditor_" + row.id } }, [
                          _vm._v(_vm._s(row.lastEditorName))
                        ]),
                        _vm._v(" "),
                        _c(
                          "b-tooltip",
                          { attrs: { target: "lastEditor_" + row.id } },
                          [
                            _vm._v(
                              _vm._s(row.lastEditorUserName) +
                                " - " +
                                _vm._s(row.lastEditorEmail) +
                                " - " +
                                _vm._s(row.lastEditorPhoneNumber)
                            )
                          ]
                        )
                      ],
                      1
                    )
                  }
                },
                {
                  key: "opr",
                  fn: function(ref) {
                    var row = ref.row
                    var value = ref.value
                    return _c(
                      "span",
                      {},
                      [
                        _c(
                          "b-button",
                          {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.canEdit,
                                expression: "canEdit"
                              }
                            ],
                            staticClass: "ml-1 p-0",
                            attrs: {
                              size: "sm",
                              variant: "info",
                              title: _vm.$t("edit")
                            },
                            on: {
                              click: function($event) {
                                return _vm.startEdit(row)
                              }
                            }
                          },
                          [
                            _c("w-mdi", {
                              attrs: { size: 18, value: "pencil" }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "b-button",
                          {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.canEdit,
                                expression: "canEdit"
                              }
                            ],
                            staticClass: "ml-1 p-0",
                            attrs: {
                              size: "sm",
                              variant: "link",
                              title: _vm.$t("translations")
                            },
                            on: {
                              click: function($event) {
                                return _vm.startEdit(row)
                              }
                            }
                          },
                          [
                            _c("w-mdi", {
                              attrs: { size: 18, value: "translate" }
                            })
                          ],
                          1
                        ),
                        _vm._v(" "),
                        _c(
                          "b-button",
                          {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.canDelete,
                                expression: "canDelete"
                              }
                            ],
                            staticClass: "ml-1 p-0",
                            attrs: {
                              size: "sm",
                              variant: "danger",
                              title: _vm.$t("delete"),
                              disabled: row.removing
                            },
                            on: {
                              click: function($event) {
                                return _vm.remove(row)
                              }
                            }
                          },
                          [
                            _c("w-mdi", {
                              attrs: { size: 18, value: "delete" }
                            })
                          ],
                          1
                        )
                      ],
                      1
                    )
                  }
                }
              ])
            },
            [
              _c(
                "div",
                { attrs: { slot: "actions" }, slot: "actions" },
                [
                  _c(
                    "b-button",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.canAdd,
                          expression: "canAdd"
                        }
                      ],
                      staticClass: "ml-1",
                      attrs: { variant: "success" },
                      on: { click: _vm.startAdd }
                    },
                    [_vm._v(_vm._s(_vm.$t("add-post")))]
                  )
                ],
                1
              )
            ]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "b-modal",
        {
          attrs: {
            title: _vm.modal.title,
            "no-close-on-esc": "",
            "no-close-on-backdrop": "",
            "hide-footer": "",
            size: "xl"
          },
          model: {
            value: _vm.modal.visible,
            callback: function($$v) {
              _vm.$set(_vm.modal, "visible", $$v)
            },
            expression: "modal.visible"
          }
        },
        [
          _c(
            "b-tabs",
            { attrs: { "content-class": "m-2 mt-3" } },
            [
              _c(
                "b-tab",
                { attrs: { title: _vm.$t("post-info") } },
                [
                  _c(
                    "b-form-group",
                    {
                      attrs: {
                        label: _vm.$t("name"),
                        state: _vm.nameState,
                        "invalid-feedback": _vm.invalidName,
                        "label-cols-lg": "2",
                        "label-cols-md": "3",
                        "label-align-md": "right"
                      }
                    },
                    [
                      _c("b-form-input", {
                        attrs: { trim: "" },
                        model: {
                          value: _vm.modal.item.name,
                          callback: function($$v) {
                            _vm.$set(_vm.modal.item, "name", $$v)
                          },
                          expression: "modal.item.name"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "b-form-group",
                    {
                      attrs: {
                        label: _vm.$t("publishFrom"),
                        "label-cols-lg": "2",
                        "label-cols-md": "3",
                        "label-align-md": "right"
                      }
                    },
                    [
                      _c("w-date-picker", {
                        model: {
                          value: _vm.modal.item.publishFromMs,
                          callback: function($$v) {
                            _vm.$set(_vm.modal.item, "publishFromMs", $$v)
                          },
                          expression: "modal.item.publishFromMs"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "b-form-group",
                    {
                      attrs: {
                        "label-cols-lg": "2",
                        "label-cols-md": "3",
                        "label-align-md": "right"
                      }
                    },
                    [
                      _c(
                        "b-form-checkbox",
                        {
                          model: {
                            value: _vm.modal.item.hasPublishUntil,
                            callback: function($$v) {
                              _vm.$set(_vm.modal.item, "hasPublishUntil", $$v)
                            },
                            expression: "modal.item.hasPublishUntil"
                          }
                        },
                        [
                          _vm._v(
                            _vm._s(
                              _vm.modal.item.hasPublishUntil
                                ? _vm.$t("publishUntilSpecificDate")
                                : _vm.$t("publishForever")
                            )
                          )
                        ]
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "b-form-group",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.modal.item.hasPublishUntil,
                          expression: "modal.item.hasPublishUntil"
                        }
                      ],
                      attrs: {
                        label: _vm.$t("publishUntil"),
                        "label-cols-lg": "2",
                        "label-cols-md": "3",
                        "label-align-md": "right"
                      }
                    },
                    [
                      _c("w-date-picker", {
                        model: {
                          value: _vm.modal.item.publishUntilMs,
                          callback: function($$v) {
                            _vm.$set(_vm.modal.item, "publishUntilMs", $$v)
                          },
                          expression: "modal.item.publishUntilMs"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "b-form-group",
                    {
                      attrs: {
                        label: _vm.$t("description"),
                        "label-cols-lg": "2",
                        "label-cols-md": "3",
                        "label-align-md": "right"
                      }
                    },
                    [
                      _c("b-form-textarea", {
                        attrs: { rows: 3, "max-rows": 6 },
                        model: {
                          value: _vm.modal.item.description,
                          callback: function($$v) {
                            _vm.$set(_vm.modal.item, "description", $$v)
                          },
                          expression: "modal.item.description"
                        }
                      })
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "b-button",
                    {
                      staticClass: "mt-3",
                      attrs: {
                        block: "",
                        variant: "success",
                        disabled: _vm.modal.saving || !_vm.nameState
                      },
                      on: { click: _vm.save }
                    },
                    [_vm._v(_vm._s(_vm.$t("save")))]
                  )
                ],
                1
              ),
              _vm._v(" "),
              _c("w-post-translations", {
                ref: "pt",
                attrs: {
                  value: _vm.modal.visible,
                  post: _vm.modal.item,
                  "hide-content": _vm.modal.isNew,
                  langs: _vm.getLangs()
                }
              })
            ],
            1
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc&":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc& ***!
  \***************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("b-card", { attrs: { title: _vm.$t("title") } }, [
    _c(
      "div",
      { staticClass: "row" },
      [
        _c(
          "div",
          { staticClass: "col-12", staticStyle: { "padding-bottom": "0" } },
          [
            _c(
              "div",
              {
                staticClass: "d-flex align-items-center h-100",
                staticStyle: {
                  "overflow-x": "auto",
                  "padding-bottom": "2px",
                  "padding-top": "2px"
                }
              },
              [
                _c(
                  "b-button",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.canAddCategory,
                        expression: "canAddCategory"
                      }
                    ],
                    attrs: { variant: "success" },
                    on: {
                      click: function(e) {
                        return _vm.startAdd(null, e)
                      }
                    }
                  },
                  [_vm._v(_vm._s(_vm.$t("add-category")))]
                )
              ],
              1
            )
          ]
        ),
        _vm._v(" "),
        _c("w-tree", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.canViewCategories && _vm.ready,
              expression: "canViewCategories && ready"
            }
          ],
          attrs: {
            items: _vm.categories,
            "id-prop": "id",
            "parent-id-prop": "parentId",
            "order-prop": "order",
            "empty-parent-id": _vm.emptyParentId,
            "expanded-first": true
          },
          on: { move: _vm.onMove },
          scopedSlots: _vm._u([
            {
              key: "text",
              fn: function(ref) {
                var node = ref.node
                return _c("div", {}, [_vm._v(_vm._s(node.data.name))])
              }
            },
            {
              key: "controls",
              fn: function(ref) {
                var node = ref.node
                return _c(
                  "div",
                  {},
                  [
                    _c(
                      "b-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.canAddCategory,
                            expression: "canAddCategory"
                          }
                        ],
                        attrs: {
                          variant: "success",
                          title: _vm.$t("add-category"),
                          size: "sm"
                        },
                        on: {
                          click: function(e) {
                            return _vm.startAdd(node.data.id, e)
                          }
                        }
                      },
                      [_vm._v("+")]
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.canEditCategory,
                            expression: "canEditCategory"
                          }
                        ],
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "info",
                          title: _vm.$t("edit"),
                          size: "sm"
                        },
                        on: {
                          click: function(e) {
                            return _vm.startEdit(node.data, e)
                          }
                        }
                      },
                      [_c("w-mdi", { attrs: { size: 18, value: "pencil" } })],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.canDeleteCategory,
                            expression: "canDeleteCategory"
                          }
                        ],
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "danger",
                          title: _vm.$t("delete"),
                          size: "sm",
                          disabled: node.data.removing
                        },
                        on: {
                          click: function(e) {
                            return _vm.remove(node.data, e)
                          }
                        }
                      },
                      [_c("w-mdi", { attrs: { size: 18, value: "delete" } })],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "link",
                          disabled: node.data.togglingVisibility,
                          title: node.data.visible
                            ? _vm.$t("visible")
                            : _vm.$t("hidden"),
                          size: "sm"
                        },
                        on: {
                          click: function(e) {
                            return _vm.toggleVisibility(node.data, e)
                          }
                        }
                      },
                      [
                        _c("w-mdi", {
                          attrs: {
                            size: 18,
                            value: node.data.visible ? "eye" : "eye-off"
                          }
                        })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "link",
                          title: _vm.$t("translations"),
                          size: "sm"
                        },
                        on: {
                          click: function(e) {
                            return _vm.showTranslations(node.data, e)
                          }
                        }
                      },
                      [
                        _c("w-mdi", { attrs: { size: 18, value: "translate" } })
                      ],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "link",
                          title: _vm.$t("posts"),
                          size: "sm"
                        },
                        on: {
                          click: function(e) {
                            return _vm.showPosts(node.data, e)
                          }
                        }
                      },
                      [
                        _c("w-mdi", { attrs: { size: 18, value: "newspaper" } })
                      ],
                      1
                    )
                  ],
                  1
                )
              }
            }
          ])
        }),
        _vm._v(" "),
        _c(
          "b-modal",
          {
            attrs: { "hide-footer": "", size: "lg", title: _vm.modal.title },
            model: {
              value: _vm.modal.visible,
              callback: function($$v) {
                _vm.$set(_vm.modal, "visible", $$v)
              },
              expression: "modal.visible"
            }
          },
          [
            _c(
              "b-form-group",
              {
                attrs: {
                  label: _vm.$t("name"),
                  state: _vm.nameState,
                  "invalid-feedback": _vm.invalidName,
                  "label-cols-lg": "2",
                  "label-cols-md": "3",
                  "label-align-md": "right"
                }
              },
              [
                _c("b-form-input", {
                  attrs: { trim: "" },
                  model: {
                    value: _vm.modal.item.name,
                    callback: function($$v) {
                      _vm.$set(_vm.modal.item, "name", $$v)
                    },
                    expression: "modal.item.name"
                  }
                })
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "b-form-group",
              {
                attrs: {
                  "label-cols-lg": "2",
                  "label-cols-md": "3",
                  "label-align-md": "right"
                }
              },
              [
                _c(
                  "b-form-checkbox",
                  {
                    attrs: { switch: "" },
                    model: {
                      value: _vm.modal.item.visible,
                      callback: function($$v) {
                        _vm.$set(_vm.modal.item, "visible", $$v)
                      },
                      expression: "modal.item.visible"
                    }
                  },
                  [_vm._v(_vm._s(_vm.$t("visible")))]
                )
              ],
              1
            ),
            _vm._v(" "),
            _c(
              "b-button",
              {
                staticClass: "mt-3",
                attrs: {
                  block: "",
                  variant: "success",
                  disabled: _vm.modal.saving || !_vm.nameState
                },
                on: { click: _vm.save }
              },
              [_vm._v(_vm._s(_vm.$t("save")))]
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("category-translations", {
          attrs: { category: _vm.category, langs: _vm.getLangs() },
          model: {
            value: _vm.translationsVisible,
            callback: function($$v) {
              _vm.translationsVisible = $$v
            },
            expression: "translationsVisible"
          }
        }),
        _vm._v(" "),
        _c("w-posts", {
          attrs: {
            "container-name": "magazine",
            "container-id": _vm.category.id,
            title: _vm.postsTitle,
            langs: _vm.getLangs()
          },
          model: {
            value: _vm.postsVisible,
            callback: function($$v) {
              _vm.postsVisible = $$v
            },
            expression: "postsVisible"
          }
        })
      ],
      1
    )
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0&":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0& ***!
  \*************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "b-modal",
    {
      attrs: { "hide-footer": "", size: "lg", title: _vm.title },
      model: {
        value: _vm.visible,
        callback: function($$v) {
          _vm.visible = $$v
        },
        expression: "visible"
      }
    },
    [
      _c(
        "w-data-table-client",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.canViewCategories,
              expression: "canViewCategories"
            }
          ],
          attrs: { rows: _vm.translations, cols: _vm.cols },
          scopedSlots: _vm._u([
            {
              key: "id",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [_vm._v(_vm._s(value))])
              }
            },
            {
              key: "culture",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [
                  _vm._v(_vm._s(_vm.getCultureName(value)))
                ])
              }
            },
            {
              key: "title",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [_vm._v(_vm._s(value))])
              }
            },
            {
              key: "name",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [_vm._v(_vm._s(value))])
              }
            },
            {
              key: "createDateTime",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [_vm._v(_vm._s(value))])
              }
            },
            {
              key: "updateDateTime",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c("span", {}, [_vm._v(_vm._s(value))])
              }
            },
            {
              key: "opr",
              fn: function(ref) {
                var value = ref.value
                var row = ref.row
                return _c(
                  "span",
                  {},
                  [
                    _c(
                      "b-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.canEditCategory,
                            expression: "canEditCategory"
                          }
                        ],
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "info",
                          size: "sm",
                          title: _vm.$t("edit")
                        },
                        on: {
                          click: function($event) {
                            return _vm.startEdit(row)
                          }
                        }
                      },
                      [_c("w-mdi", { attrs: { size: 18, value: "pencil" } })],
                      1
                    ),
                    _vm._v(" "),
                    _c(
                      "b-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.canEditCategory,
                            expression: "canEditCategory"
                          }
                        ],
                        staticClass: "ml-1 p-0",
                        attrs: {
                          variant: "danger",
                          size: "sm",
                          disabled: row.removing,
                          title: _vm.$t("delete")
                        },
                        on: {
                          click: function($event) {
                            return _vm.remove(row)
                          }
                        }
                      },
                      [_c("w-mdi", { attrs: { size: 18, value: "delete" } })],
                      1
                    )
                  ],
                  1
                )
              }
            }
          ])
        },
        [
          _c(
            "span",
            { attrs: { slot: "actions" }, slot: "actions" },
            [
              _c(
                "b-button",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.remainingCultures().length > 0,
                      expression: "remainingCultures().length > 0"
                    }
                  ],
                  staticClass: "ml-1",
                  attrs: { variant: "success" },
                  on: { click: _vm.startAdd }
                },
                [_vm._v(_vm._s(_vm.$t("add-translation")))]
              )
            ],
            1
          )
        ]
      ),
      _vm._v(" "),
      _c(
        "b-modal",
        {
          attrs: { "hide-footer": "", size: "lg", title: _vm.modal.title },
          model: {
            value: _vm.modal.visible,
            callback: function($$v) {
              _vm.$set(_vm.modal, "visible", $$v)
            },
            expression: "modal.visible"
          }
        },
        [
          _vm.modal.isNew
            ? _c(
                "b-form-group",
                {
                  attrs: {
                    label: _vm.$t("culture"),
                    state: _vm.cultureState,
                    "invalid-feedback": _vm.invalidCulture,
                    "label-cols-lg": "2",
                    "label-cols-md": "3",
                    "label-align-md": "right"
                  }
                },
                [
                  _c("b-form-select", {
                    attrs: { options: _vm.remainingCultures() },
                    model: {
                      value: _vm.modal.item.culture,
                      callback: function($$v) {
                        _vm.$set(_vm.modal.item, "culture", $$v)
                      },
                      expression: "modal.item.culture"
                    }
                  })
                ],
                1
              )
            : _vm._e(),
          _vm._v(" "),
          _c(
            "b-form-group",
            {
              attrs: {
                label: _vm.$t("name"),
                state: _vm.nameState,
                "invalid-feedback": _vm.invalidName,
                "label-cols-lg": "2",
                "label-cols-md": "3",
                "label-align-md": "right"
              }
            },
            [
              _c("b-form-input", {
                attrs: {
                  trim: "",
                  dir: _vm.getCultureDirection(_vm.modal.item.culture)
                },
                model: {
                  value: _vm.modal.item.name,
                  callback: function($$v) {
                    _vm.$set(_vm.modal.item, "name", $$v)
                  },
                  expression: "modal.item.name"
                }
              })
            ],
            1
          ),
          _vm._v(" "),
          _c(
            "b-form-group",
            {
              attrs: {
                label: _vm.$t("title"),
                state: _vm.titleState,
                "invalid-feedback": _vm.invalidTitle,
                "label-cols-lg": "2",
                "label-cols-md": "3",
                "label-align-md": "right"
              }
            },
            [
              _c("b-form-input", {
                attrs: {
                  trim: "",
                  dir: _vm.getCultureDirection(_vm.modal.item.culture)
                },
                model: {
                  value: _vm.modal.item.title,
                  callback: function($$v) {
                    _vm.$set(_vm.modal.item, "title", $$v)
                  },
                  expression: "modal.item.title"
                }
              })
            ],
            1
          ),
          _vm._v(" "),
          _c(
            "b-form-group",
            {
              attrs: {
                label: _vm.$t("subtitle"),
                "label-cols-lg": "2",
                "label-cols-md": "3",
                "label-align-md": "right"
              }
            },
            [
              _c("b-form-textarea", {
                attrs: {
                  rows: 3,
                  "max-rows": 6,
                  dir: _vm.getCultureDirection(_vm.modal.item.culture)
                },
                model: {
                  value: _vm.modal.item.subtitle,
                  callback: function($$v) {
                    _vm.$set(_vm.modal.item, "subtitle", $$v)
                  },
                  expression: "modal.item.subtitle"
                }
              })
            ],
            1
          ),
          _vm._v(" "),
          _c(
            "b-form-group",
            {
              attrs: {
                label: _vm.$t("thumbs"),
                "label-cols-lg": "2",
                "label-cols-md": "3",
                "label-align-md": "right"
              }
            },
            [
              _c("w-image-select", {
                model: {
                  value: _vm.modal.item.thumbArray,
                  callback: function($$v) {
                    _vm.$set(_vm.modal.item, "thumbArray", $$v)
                  },
                  expression: "modal.item.thumbArray"
                }
              })
            ],
            1
          ),
          _vm._v(" "),
          _c(
            "b-button",
            {
              staticClass: "mt-3",
              attrs: {
                block: "",
                variant: "success",
                disabled:
                  _vm.modal.saving ||
                  !_vm.nameState ||
                  !_vm.titleState ||
                  (_vm.modal.isNew && !_vm.cultureState)
              },
              on: { click: _vm.save }
            },
            [_vm._v(_vm._s(_vm.$t("save")))]
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./src/components/mag/WPosts.i18n.json":
/*!*********************************************!*\
  !*** ./src/components/mag/WPosts.i18n.json ***!
  \*********************************************/
/*! exports provided: ar, fa, en, de, fr, es, tr, ru, ur, ps, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"ar\":{\"add-new-post\":\"أضف منشور جديد\",\"add-post\":\"منشور جديد\",\"author\":\"مؤلف\",\"delete\":\"حذف\",\"description\":\"وصف\",\"edit\":\"تعديل\",\"edit-post\":\"تعديل المنشور\",\"id\":\"هوية شخصية\",\"lastEditor\":\"محرر\",\"name\":\"اسم\",\"name-required\":\"مطلوب اسم\",\"oprations\":\"عمليات\",\"post-info\":\"معلومات البريد.\",\"publishForever\":\"إلى الأبد\",\"publishFrom\":\"نشر من\",\"publishUntil\":\"حتى\",\"publishUntilSpecificDate\":\"نشر حتى تاريخ محدد\",\"save\":\"احفظ التغييرات\",\"translations\":\"الترجمات\"},\"fa\":{\"add-new-post\":\"ثبت پُست جدید\",\"add-post\":\"پُست جدید\",\"author\":\"مولف\",\"delete\":\"حذف\",\"description\":\"شرح\",\"edit\":\"ویرایش\",\"edit-post\":\"ویرایش پُست\",\"id\":\"شناسه\",\"lastEditor\":\"ویراستار\",\"name\":\"نام\",\"name-required\":\"نام وارد نشده است\",\"oprations\":\"عملیات\",\"post-info\":\"اطلاعات پُست\",\"publishForever\":\"انتشار همیشگی\",\"publishFrom\":\"انتشار از تاریخ\",\"publishUntil\":\"انتشار تا تاریخ\",\"publishUntilSpecificDate\":\"انتشار تا تاریخ معین\",\"save\":\"ثبت تغییرات\",\"translations\":\"ترجمه ها\"},\"en\":{\"add-new-post\":\"Add new post\",\"add-post\":\"New post\",\"author\":\"Author\",\"delete\":\"Delete\",\"description\":\"Description\",\"edit\":\"Edit\",\"edit-post\":\"Edit post\",\"id\":\"ID\",\"lastEditor\":\"Editor\",\"name\":\"Name\",\"name-required\":\"Name is required\",\"oprations\":\"Operations\",\"post-info\":\"Post info.\",\"publishForever\":\"Forever\",\"publishFrom\":\"Publish from\",\"publishUntil\":\"Until\",\"publishUntilSpecificDate\":\"Publish until a specific date\",\"save\":\"Save changes\",\"translations\":\"Translations\"},\"de\":{\"add-new-post\":\"Neuen Beitrag hinzufügen\",\"add-post\":\"Neuer Beitrag\",\"author\":\"Autor\",\"delete\":\"Löschen\",\"description\":\"Beschreibung\",\"edit\":\"Bearbeiten\",\"edit-post\":\"Beitrag bearbeiten\",\"id\":\"ICH WÜRDE\",\"lastEditor\":\"Editor\",\"name\":\"Name\",\"name-required\":\"Name ist erforderlich\",\"oprations\":\"Operationen\",\"post-info\":\"Info posten.\",\"publishForever\":\"Für immer\",\"publishFrom\":\"Veröffentlichen von\",\"publishUntil\":\"Bis um\",\"publishUntilSpecificDate\":\"Bis zu einem bestimmten Datum veröffentlichen\",\"save\":\"Änderungen speichern\",\"translations\":\"Übersetzungen\"},\"fr\":{\"add-new-post\":\"Ajouter un nouveau message\",\"add-post\":\"Nouveau poste\",\"author\":\"Auteur\",\"delete\":\"Supprimer\",\"description\":\"La description\",\"edit\":\"Éditer\",\"edit-post\":\"Modifier le message\",\"id\":\"ID\",\"lastEditor\":\"Éditeur\",\"name\":\"Nom\",\"name-required\":\"Le nom est requis\",\"oprations\":\"Opérations\",\"post-info\":\"Publier des informations.\",\"publishForever\":\"Pour toujours\",\"publishFrom\":\"Publier à partir de\",\"publishUntil\":\"Jusqu'à ce que\",\"publishUntilSpecificDate\":\"Publier jusqu'à une date précise\",\"save\":\"Sauvegarder les modifications\",\"translations\":\"Traductions\"},\"es\":{\"add-new-post\":\"Agregar nueva publicación\",\"add-post\":\"Nueva publicación\",\"author\":\"Autor\",\"delete\":\"Eliminar\",\"description\":\"Descripción\",\"edit\":\"Editar\",\"edit-post\":\"Editar post\",\"id\":\"CARNÉ DE IDENTIDAD\",\"lastEditor\":\"Editor\",\"name\":\"Nombre\",\"name-required\":\"Se requiere el nombre\",\"oprations\":\"Operaciones\",\"post-info\":\"Publicar información.\",\"publishForever\":\"Siempre\",\"publishFrom\":\"Publicar desde\",\"publishUntil\":\"Hasta\",\"publishUntilSpecificDate\":\"Publicar hasta una fecha específica\",\"save\":\"Guardar cambios\",\"translations\":\"Traducciones\"},\"tr\":{\"add-new-post\":\"Yeni yayın ekle\",\"add-post\":\"Yeni posta\",\"author\":\"Yazar\",\"delete\":\"Sil\",\"description\":\"Açıklama\",\"edit\":\"Düzenle\",\"edit-post\":\"Gönderiyi düzenle\",\"id\":\"İD\",\"lastEditor\":\"Editör\",\"name\":\"ad\",\"name-required\":\"İsim gerekli\",\"oprations\":\"Operasyonlar\",\"post-info\":\"Bilgi gönderin.\",\"publishForever\":\"Sonsuza dek\",\"publishFrom\":\"Gönderen\",\"publishUntil\":\"A kadar\",\"publishUntilSpecificDate\":\"Belirli bir tarihe kadar yayınla\",\"save\":\"Değişiklikleri Kaydet\",\"translations\":\"\"},\"ru\":{\"add-new-post\":\"Добавить новый пост\",\"add-post\":\"Новый пост\",\"author\":\"автор\",\"delete\":\"Удалить\",\"description\":\"Описание\",\"edit\":\"редактировать\",\"edit-post\":\"Редактировать сообщение\",\"id\":\"МНЕ БЫ\",\"lastEditor\":\"редактор\",\"name\":\"название\",\"name-required\":\"Имя обязательно\",\"oprations\":\"операции\",\"post-info\":\"Разместить информацию.\",\"publishForever\":\"навсегда\",\"publishFrom\":\"Опубликовать из\",\"publishUntil\":\"До того как\",\"publishUntilSpecificDate\":\"Опубликовать до определенной даты\",\"save\":\"Сохранить изменения\",\"translations\":\"Переводы\"},\"ur\":{\"add-new-post\":\"نئی پوسٹ شامل کریں\",\"add-post\":\"نئی پوسٹ\",\"author\":\"مصنف\",\"delete\":\"حذف کریں\",\"description\":\"تفصیل\",\"edit\":\"ترمیم\",\"edit-post\":\"پوسٹ میں ترمیم کریں\",\"id\":\"ID\",\"lastEditor\":\"ایڈیٹر\",\"name\":\"نام\",\"name-required\":\"نام کی ضرورت ہے\",\"oprations\":\"آپریشنز\",\"post-info\":\"معلومات پوسٹ کریں۔\",\"publishForever\":\"ہمیشہ کے لئے\",\"publishFrom\":\"سے شائع کریں\",\"publishUntil\":\"جب تک\",\"publishUntilSpecificDate\":\"کسی خاص تاریخ تک شائع کریں\",\"save\":\"تبدیلیاں محفوظ کرو\",\"translations\":\"\"},\"ps\":{\"add-new-post\":\"نوې پوسټ اضافه کړئ\",\"add-post\":\"نوې پوسټ\",\"author\":\"لیکوال\",\"delete\":\"ړنګول\",\"description\":\"توضيح\",\"edit\":\"سمول\",\"edit-post\":\"پوسټ ایډیټ کړئ\",\"id\":\"ID\",\"lastEditor\":\"مدیر\",\"name\":\"نوم\",\"name-required\":\"نوم اړین دی\",\"oprations\":\"عملیات\",\"post-info\":\"پوسټ معلومات.\",\"publishForever\":\"د تل لپاره\",\"publishFrom\":\"له خپرېدو څخه\",\"publishUntil\":\"تر\",\"publishUntilSpecificDate\":\"تر یوې ټاکلې نیټې پورې خپرول\",\"save\":\"بدلونونه خوندي کړئ\",\"translations\":\"ژباړې\"}}");

/***/ }),

/***/ "./src/components/mag/WPosts.vue":
/*!***************************************!*\
  !*** ./src/components/mag/WPosts.vue ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WPosts.vue?vue&type=template&id=417637f0& */ "./src/components/mag/WPosts.vue?vue&type=template&id=417637f0&");
/* harmony import */ var _WPosts_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WPosts.vue?vue&type=script&lang=js& */ "./src/components/mag/WPosts.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _WPosts_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__["render"],
  _WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/mag/WPosts.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/mag/WPosts.vue?vue&type=script&lang=js&":
/*!****************************************************************!*\
  !*** ./src/components/mag/WPosts.vue?vue&type=script&lang=js& ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_WPosts_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./WPosts.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/mag/WPosts.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_WPosts_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/mag/WPosts.vue?vue&type=template&id=417637f0&":
/*!**********************************************************************!*\
  !*** ./src/components/mag/WPosts.vue?vue&type=template&id=417637f0& ***!
  \**********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./WPosts.vue?vue&type=template&id=417637f0& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/mag/WPosts.vue?vue&type=template&id=417637f0&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_WPosts_vue_vue_type_template_id_417637f0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/panel/mag/Categories.i18n.json":
/*!********************************************!*\
  !*** ./src/panel/mag/Categories.i18n.json ***!
  \********************************************/
/*! exports provided: ar, fa, en, de, fr, es, tr, ru, ur, ps, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"ar\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"fa\":{\"add-category\":\"دسته بندی جدید\",\"add-new-category\":\"ثبت دسته بندی جدید\",\"category-posts\":\"پست های {0}\",\"delete\":\"حذف\",\"edit\":\"ویرایش\",\"edit-category\":\"ویرایش دسته بندی\",\"hidden\":\"پنهان\",\"name\":\"نام\",\"name-required\":\"نام وارد نشده است\",\"posts\":\"پُست ها\",\"save\":\"ثبت تغییرات\",\"title\":\"دسته بندی ها\",\"translations\":\"ترجمه ها\",\"visible\":\"قابل مشاهده\"},\"en\":{\"add-category\":\"New category\",\"add-new-category\":\"Add new category\",\"category-posts\":\"Posts of {0}\",\"delete\":\"Delete\",\"edit\":\"Edit\",\"edit-category\":\"Edit category\",\"hidden\":\"Hidden\",\"name\":\"Name\",\"name-required\":\"Name is required\",\"posts\":\"Posts\",\"save\":\"Save changes\",\"title\":\"Categories\",\"translations\":\"Translations\",\"visible\":\"Visible\"},\"de\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"fr\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"es\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"tr\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"ru\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"ur\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"},\"ps\":{\"add-category\":\"\",\"add-new-category\":\"\",\"category-posts\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-category\":\"\",\"hidden\":\"\",\"name\":\"\",\"name-required\":\"\",\"posts\":\"\",\"save\":\"\",\"title\":\"\",\"translations\":\"\",\"visible\":\"\"}}");

/***/ }),

/***/ "./src/panel/mag/Categories.vue":
/*!**************************************!*\
  !*** ./src/panel/mag/Categories.vue ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Categories.vue?vue&type=template&id=3dcd31bc& */ "./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc&");
/* harmony import */ var _Categories_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Categories.vue?vue&type=script&lang=js& */ "./src/panel/mag/Categories.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _Categories_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__["render"],
  _Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/panel/mag/Categories.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/panel/mag/Categories.vue?vue&type=script&lang=js&":
/*!***************************************************************!*\
  !*** ./src/panel/mag/Categories.vue?vue&type=script&lang=js& ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Categories_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./Categories.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/Categories.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Categories_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc&":
/*!*********************************************************************!*\
  !*** ./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc& ***!
  \*********************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./Categories.vue?vue&type=template&id=3dcd31bc& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/Categories.vue?vue&type=template&id=3dcd31bc&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Categories_vue_vue_type_template_id_3dcd31bc___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/panel/mag/CategoryTranslations.i18n.json":
/*!******************************************************!*\
  !*** ./src/panel/mag/CategoryTranslations.i18n.json ***!
  \******************************************************/
/*! exports provided: ar, fa, en, de, fr, es, tr, ru, ur, ps, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"ar\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"fa\":{\"add-new-translation\":\"ثبت ترجمه جدید\",\"add-translation\":\"ترجمه جدید\",\"createDateTime\":\"ثبت\",\"culture\":\"زبان\",\"culture-required\":\"زبان انتخاب نشده است\",\"delete\":\"حذف\",\"edit\":\"ویرایش\",\"edit-translation\":\"ویرایش ترجمه {0}\",\"id\":\"شناسه\",\"modal-title\":\"ترجمه های دسته بندی {0}\",\"name\":\"نام\",\"name-required\":\"نام وارد نشده است\",\"operations\":\"عملیات\",\"save\":\"ثبت تغییرات\",\"subtitle\":\"زیرعنوان\",\"thumbs\":\"تصاویر\",\"title\":\"عنوان\",\"title-required\":\"عنوان وارد نشده است\",\"updateDateTime\":\"آخرین ویرایش\"},\"en\":{\"add-new-translation\":\"New translation\",\"add-translation\":\"Add translation\",\"createDateTime\":\"Created On\",\"culture\":\"Language\",\"culture-required\":\"Language is required\",\"delete\":\"Delete\",\"edit\":\"Edit\",\"edit-translation\":\"Edit translation: {0}\",\"id\":\"ID\",\"modal-title\":\"Translations of {0} category\",\"name\":\"Name\",\"name-required\":\"Name is required\",\"operations\":\"Operations\",\"save\":\"Save changes\",\"subtitle\":\"Subtitle\",\"thumbs\":\"Pictures\",\"title\":\"Title\",\"title-required\":\"Title is required\",\"updateDateTime\":\"Updated On\"},\"de\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"fr\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"es\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"tr\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"ru\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"ur\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"},\"ps\":{\"add-new-translation\":\"\",\"add-translation\":\"\",\"createDateTime\":\"\",\"culture\":\"\",\"culture-required\":\"\",\"delete\":\"\",\"edit\":\"\",\"edit-translation\":\"\",\"id\":\"\",\"modal-title\":\"\",\"name\":\"\",\"name-required\":\"\",\"operations\":\"\",\"save\":\"\",\"subtitle\":\"\",\"thumbs\":\"\",\"title\":\"\",\"title-required\":\"\",\"updateDateTime\":\"\"}}");

/***/ }),

/***/ "./src/panel/mag/CategoryTranslations.vue":
/*!************************************************!*\
  !*** ./src/panel/mag/CategoryTranslations.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CategoryTranslations.vue?vue&type=template&id=e037d0c0& */ "./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0&");
/* harmony import */ var _CategoryTranslations_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CategoryTranslations.vue?vue&type=script&lang=js& */ "./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");





/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _CategoryTranslations_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__["render"],
  _CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/panel/mag/CategoryTranslations.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CategoryTranslations_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./CategoryTranslations.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/CategoryTranslations.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_CategoryTranslations_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0&":
/*!*******************************************************************************!*\
  !*** ./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0& ***!
  \*******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./CategoryTranslations.vue?vue&type=template&id=e037d0c0& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/panel/mag/CategoryTranslations.vue?vue&type=template&id=e037d0c0&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_CategoryTranslations_vue_vue_type_template_id_e037d0c0___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/panel/mag/index.js":
/*!********************************!*\
  !*** ./src/panel/mag/index.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ "vue");
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Categories_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Categories.vue */ "./src/panel/mag/Categories.vue");


vue__WEBPACK_IMPORTED_MODULE_0___default.a.component('panel-categories', _Categories_vue__WEBPACK_IMPORTED_MODULE_1__["default"]);

/***/ }),

/***/ "./src/utility/ServerValues.js":
/*!*************************************!*\
  !*** ./src/utility/ServerValues.js ***!
  \*************************************/
/*! exports provided: ServerValues */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerValues", function() { return ServerValues; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);



/**
 * _Layout keys:
 * 
 * xsrf-token
 * xsrf-header-name
 * env
 * cultures
 * fallback-culture
 * culture
 * direction
 * file-icon-path
 * thumber-options
 * user
 */
var rawElements = document.getElementsByClassName("libw-raw-value");
var jsonElements = document.getElementsByClassName("libw-json-value");
var resultTempElements = document.getElementsByClassName("libw-result-temp-value");
var cache = {
  rtmp: null,
  values: null
};
var ServerValues = /*#__PURE__*/function () {
  function ServerValues() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ServerValues);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ServerValues, [{
    key: "getResultTempValues",

    /**
     * Gets TempData values
     * @returns {Object}
     */
    value: function getResultTempValues() {
      if (!_.isEmpty(cache.rtmp)) {
        return cache.rtmp;
      }

      var res = {};
      Array.from(resultTempElements).forEach(function (node) {
        try {
          var _name = node.getAttribute("name");

          res[_name] = JSON.parse(node.innerHTML);
        } catch (error) {
          console.log("name: ".concat(name, " - value: ").concat(node.innerHTML));
          console.warn(error);
        }
      });
      cache.rtmp = res;
      return res;
    }
    /**
     * Gets all server side values
     * @returns {Object}
     */

  }, {
    key: "getValues",
    value: function getValues() {
      if (!_.isEmpty(cache.values)) {
        return cache.values;
      }

      var res = {};
      Array.from(rawElements).forEach(function (node) {
        try {
          var _name2 = node.getAttribute("name");

          res[_name2] = node.innerHTML;
        } catch (error) {
          console.log("name: ".concat(name, " - value: ").concat(node.innerHTML));
          console.warn(error);
        }
      });
      Array.from(jsonElements).forEach(function (node) {
        try {
          var _name3 = node.getAttribute("name");

          res[_name3] = JSON.parse(node.innerHTML);
        } catch (error) {
          console.log("name: ".concat(name, " - value: ").concat(node.innerHTML));
          console.warn(error);
        }
      });
      cache.values = res;
      return res;
    }
  }]);

  return ServerValues;
}();

/***/ }),

/***/ "./src/utility/VueI18n.js":
/*!********************************!*\
  !*** ./src/utility/VueI18n.js ***!
  \********************************/
/*! exports provided: i18n */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i18n", function() { return i18n; });
/* harmony import */ var vue_i18n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-i18n */ "./node_modules/vue-i18n/dist/vue-i18n.esm.js");
/* harmony import */ var _ServerValues__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ServerValues */ "./src/utility/ServerValues.js");


/**
 * Add vue-i18n localization
 * @param {Object} messages 
 */

function i18n(messages) {
  var serverValues = new _ServerValues__WEBPACK_IMPORTED_MODULE_1__["ServerValues"]().getValues();
  return new vue_i18n__WEBPACK_IMPORTED_MODULE_0__["default"]({
    locale: serverValues['culture'],
    fallbackLocale: serverValues['fallback-culture'],
    messages: messages
  });
}
;

/***/ }),

/***/ "./src/utility/dateHelper.js":
/*!***********************************!*\
  !*** ./src/utility/dateHelper.js ***!
  \***********************************/
/*! exports provided: dateHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dateHelper", function() { return dateHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ServerValues__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ServerValues */ "./src/utility/ServerValues.js");




var DateHelper = /*#__PURE__*/function () {
  function DateHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DateHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DateHelper, [{
    key: "getCulture",
    value: function getCulture() {
      var sv = new _ServerValues__WEBPACK_IMPORTED_MODULE_2__["ServerValues"]().getValues();
      return sv['culture'];
    }
    /**
     * Returns a pretty date time format. 
     * culture === 'fa' ? 'dddd jDD jMMMM jYYYY HH:mm' : 'dddd DD MMMM YYYY HH:mm'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "getPrettyDateTimeFormat",
    value: function getPrettyDateTimeFormat(culture) {
      if (culture === undefined || culture === null) {
        culture = this.getCulture();
      }

      return culture === 'fa' ? 'dddd jDD jMMMM jYYYY HH:mm' : 'dddd DD MMMM YYYY HH:mm';
    }
    /**
     * Returns a pretty date format. 
     * culture === 'fa' ? 'dddd jDD jMMMM jYYYY' : 'dddd DD MMMM YYYY'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "getPrettyDateFormat",
    value: function getPrettyDateFormat(culture) {
      if (culture === undefined || culture === null) {
        culture = this.getCulture();
      }

      return culture === 'fa' ? 'dddd jDD jMMMM jYYYY' : 'dddd DD MMMM YYYY';
    }
    /**
     * Returns a simple date time format
     * culture === 'fa' ? 'jYYYY/jMM/jDD HH:mm:ss' : 'YYYY/MM/DD HH:mm:ss'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "getSimpleDateTimeFormat",
    value: function getSimpleDateTimeFormat(culture) {
      if (culture === undefined || culture === null) {
        culture = this.getCulture();
      }

      return culture === 'fa' ? 'jYYYY/jMM/jDD HH:mm:ss' : 'YYYY/MM/DD HH:mm:ss';
    }
    /**
     * Returns a simple date time format
     * culture === 'fa' ? 'jYYYY/jMM/jDD' : 'YYYY/MM/DD'
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "getSimpleDateFormat",
    value: function getSimpleDateFormat(culture) {
      if (culture === undefined || culture === null) {
        culture = this.getCulture();
      }

      return culture === 'fa' ? 'jYYYY/jMM/jDD' : 'YYYY/MM/DD';
    }
    /**
     * converts the given unix milliseconds to string
     * @param {Number} ms unix milliseconds
     * @param {String} format date time format. default: simple date time format
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "formatUnixMs",
    value: function formatUnixMs(ms, format, culture) {
      if (culture === undefined || culture === null) {
        culture = this.getCulture();
      }

      var f = this.getSimpleDateTimeFormat(culture);

      if (format !== undefined && format !== null) {
        f = format;
      }

      return moment(ms).locale(culture).format(f);
    }
    /**
     * converts the given unix ticks to string
     * @param {Number} ms unix ticks
     * @param {String} format date time format. default: simple date time format
     * @param {String} culture culture code. default: current culture
     * @returns {String}
     */

  }, {
    key: "formatTicks",
    value: function formatTicks(ticks, format, culture) {
      return this.formatUnixMs(ticks / 10000, format, culture);
    }
  }]);

  return DateHelper;
}();

var dateHelper = new DateHelper();


/***/ }),

/***/ "./src/utility/guid.js":
/*!*****************************!*\
  !*** ./src/utility/guid.js ***!
  \*****************************/
/*! exports provided: guid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guid", function() { return guid; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);



var Guid = /*#__PURE__*/function () {
  function Guid() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Guid);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Guid, [{
    key: "create",

    /**
     * Creates a new guid
     * @param {Boolean} hyphen if true then the guid will be like aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee otherwise there will be no hyphen
     * @returns {String}
     */
    value: function create(hyphen) {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      if (hyphen === undefined || hyphen === null) {
        return "".concat(s4()).concat(s4()).concat(s4()).concat(s4()).concat(s4()).concat(s4()).concat(s4()).concat(s4());
      }

      return "".concat(s4()).concat(s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4(), "-").concat(s4()).concat(s4()).concat(s4());
    }
    /**
     * Returns a new random id using create(false)
     * @returns {String}
     */

  }, {
    key: "newId",
    value: function newId() {
      return "e_".concat(this.create());
    }
    /**
     * Empty value for guid : '00000000-0000-0000-0000-000000000000'
     * @returns {String}
     */

  }, {
    key: "empty",
    value: function empty() {
      return '00000000-0000-0000-0000-000000000000';
    }
    /**
     * Empty value for guid : '00000000000000000000000000000000'
     * @returns {String}
     */

  }, {
    key: "emptyNoHyphen",
    value: function emptyNoHyphen() {
      return '00000000000000000000000000000000';
    }
  }]);

  return Guid;
}();

var guid = new Guid();


/***/ }),

/***/ "vue":
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_vue__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,